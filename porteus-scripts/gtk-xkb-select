#!/usr/bin/python
## This script will create a gtkdialog will act as a front end
## to the setxkb command to allow users to set their local keymap.

## script by Ahau
## jssouza: ported to pygobject3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import subprocess
import os.path
from os import path

class GtkXkb(Gtk.Window):
    def __init__(self):
        self.init_kmap_list()
        Gtk.Window.__init__(self, title = "Keymap Settings", border_width = 5, height_request = 400, width_request = 500, icon_name = "input-keyboard")
        self.vb = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL)

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup("<span size=\"x-large\" weight=\"bold\">Porteus Keymap Settings</span>")
        self.vb.pack_start(self.l_header_txt, False, False, 5)

        self.vb.pack_start(Gtk.Separator(), False, False, 5)

        self.l_dt_header_txt = Gtk.Label(xalign = 0.0)
        self.l_dt_header_txt.set_markup("<span weight=\"bold\">Choose your keyboard layout:</span>")
        self.vb.pack_start(self.l_dt_header_txt, False, False, 5)

        self.hb1 = Gtk.Box(spacing = 5)
        self.hb1.pack_start(Gtk.Label(label = "Select locale:  "), False, False, 5)

        self.l_combo = Gtk.ComboBoxText()
        self.l_combo.set_entry_text_column(0)
        ind = 0
        for count, locale in enumerate(self.kmap_list):
            locale = locale.strip('\n')
            self.l_combo.append_text(locale)
            if locale.startswith(self.kmap_l_orig[0]):
                ind = count
        if ind == 0:
            ind = 30 # us ind
        self.l_combo.set_active(ind)
        self.l_combo.connect("changed", self.on_l_combo_changed)
        self.hb1.pack_start(self.l_combo, False, False, 5)

        self.flag_file = "/usr/share/pixmaps/porteus/xkb_flags/" + self.kmap_l_orig[0] + ".png"
        if not path.exists(self.flag_file):
            self.flag_file = "/usr/share/pixmaps/porteus/xkb_flags/stock.png"

        self.flag_img =  Gtk.Image.new_from_file(self.flag_file)
        self.hb1.pack_start(self.flag_img, False, False, 0)

        self.kmap_selected = self.l_combo.get_active_text().split()[0]
        self.vb.pack_start(self.hb1, False, False, 10)

        self.hb2 = Gtk.Box(spacing = 5)

        self.hb2.pack_start(Gtk.Label(label = "Select variant:"), False, False, 5)

        self.v_combo = Gtk.ComboBoxText()
        self.v_combo.set_entry_text_column(0)
        self.v_combo.connect("changed", self.on_v_combo_changed)

        self.update_variants()
        self.old_v_combo_text = self.v_combo.get_active_text
        self.hb2.pack_start(self.v_combo, False, False, 5)

        self.vb.pack_start(self.hb2, False, False, 10)

        self.l_type_header_txt = Gtk.Label(xalign = 0.0)
        self.l_type_header_txt.set_markup("<span weight=\"bold\">Test your keyboard settings by typing here:</span>")
        self.vb.pack_start(self.l_type_header_txt, False, False, 10)

        self.scrolledwindow = Gtk.ScrolledWindow(hexpand = True, vexpand = True)
        self.vb.pack_start(self.scrolledwindow, True, True, 5)

        self.textview = Gtk.TextView(border_width = 5, wrap_mode = Gtk.WrapMode.WORD, justification = Gtk.Justification.FILL)
        self.scrolledwindow.add(self.textview)

        self.hb_bottom = Gtk.Box(spacing = 5, homogeneous = False)

        self.cancel_button = Gtk.Button.new_with_label("Cancel")
        self.cancel_button.connect("clicked", self.on_cancel_clicked)
        self.hb_bottom.pack_end(self.cancel_button, False, False, 2)

        self.ok_button = Gtk.Button.new_with_label("OK")
        self.ok_button.connect("clicked", self.on_ok_clicked)
        self.ok_button.set_sensitive(False)
        self.hb_bottom.pack_end(self.ok_button, False, False, 2)

        self.help_img = Gtk.Image.new_from_icon_name("help-about", Gtk.IconSize.BUTTON)
        self.help_button = Gtk.Button.new_with_label("Help")
        self.help_button.set_image(self.help_img)
        self.help_button.set_always_show_image(True)
        self.help_button.connect("clicked", self.on_help_clicked)
        self.hb_bottom.pack_end(self.help_button, False, False, 2)

        self.vb.pack_end(self.hb_bottom, False, False, 5)
        self.vb.pack_end(Gtk.Separator(), False, False, 10)

        self.add(self.vb)
        self.help_button.grab_focus()

    def init_kmap_list(self):
        p1 = subprocess.Popen(['cat', '/usr/share/X11/xkb/rules/base.lst'], stdout=subprocess.PIPE)
        p2 = subprocess.Popen(['sed', '/! layout/,/! variant/!d; /^!/d; /^$/d; s/^  //g; s/ * /     /'], stdin = p1.stdout, stdout=subprocess.PIPE)
        self.kmap_list = subprocess.run(['sort', '-k', '2'], stdin = p2.stdout, stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
        self.kmap_list.pop()

        p1 = subprocess.Popen(['cat', '/usr/share/X11/xkb/rules/base.lst'], stdout=subprocess.PIPE)
        self.kmap_vlist = subprocess.run(['sed', '/! variant/,/! option/!d; /^!/d; /^$/d; s/^  //g; s/ * / /'], stdin = p1.stdout, stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
        self.kmap_vlist.pop()

        p1 = subprocess.Popen(['setxkbmap', '-query'], stdout=subprocess.PIPE)
        p2 = subprocess.Popen(['grep', 'layout'], stdin = p1.stdout, stdout=subprocess.PIPE)
        self.kmap_l_orig = subprocess.run(['cut', '-d:', '-f2-'], stdin = p2.stdout, stdout=subprocess.PIPE).stdout.decode('utf-8').strip('\n').strip().split(',')

        p1 = subprocess.Popen(['setxkbmap', '-query'], stdout=subprocess.PIPE)
        p2 = subprocess.Popen(['grep', 'variant'], stdin = p1.stdout, stdout=subprocess.PIPE)
        self.kmap_v_orig = subprocess.run(['cut', '-d:', '-f2-'], stdin = p2.stdout, stdout=subprocess.PIPE).stdout.decode('utf-8').strip('\n').strip().split(',')

        #print(self.kmap_list)
        #print(self.kmap_vlist)
        #print(self.kmap_l_orig)
        #print(self.kmap_v_orig)

    def set_kmap(self):
        kmap_l_to_set = self.kmap_selected
        if kmap_l_to_set != "us":
            kmap_l_to_set += ",us"
        if not self.kmap_v_selected or self.kmap_v_selected == "(none)":
            subprocess.run(['setxkbmap', '-layout', kmap_l_to_set])
        else:
            subprocess.run(['setxkbmap', '-layout', kmap_l_to_set, '-variant', self.kmap_v_selected])

    def set_orig_kmap(self):
        kmap_l_to_set = ''
        kmap_v_to_set = ''
        for kmap in self.kmap_l_orig:
            kmap_l_to_set = kmap_l_to_set + kmap
            kmap_l_to_set = kmap_l_to_set + ','
        kmap_l_to_set = kmap_l_to_set[:-1]
        for variant in self.kmap_v_orig:
            kmap_v_to_set = kmap_v_to_set + variant
            kmap_v_to_set = kmap_v_to_set + ','
        kmap_v_to_set = kmap_v_to_set[:-1]

        subprocess.run(['setxkbmap', '-layout', kmap_l_to_set, '-variant', kmap_v_to_set])

    def on_l_combo_changed(self, combo):
        self.kmap_selected = combo.get_active_text().split()[0]
        self.flag_file = "/usr/share/pixmaps/porteus/xkb_flags/" + self.kmap_selected + ".png"
        if not path.exists(self.flag_file):
            self.flag_file = "/usr/share/pixmaps/porteus/xkb_flags/stock.png"

        self.flag_img.set_from_file(self.flag_file)
        self.update_variants()
        self.ok_button.set_sensitive(True)
        self.set_kmap()

    def on_v_combo_changed(self, combo):
        self.old_v_combo_text = combo.get_active_text()
        if self.old_v_combo_text:
            self.kmap_v_selected = combo.get_active_text().split()[0]
        self.ok_button.set_sensitive(True)
        self.set_kmap()

    def update_variants(self):
        self.v_combo.disconnect_by_func(self.on_v_combo_changed)

        self.v_combo.remove_all()

        for variant in self.kmap_vlist:
            ind = variant.find(" " + self.kmap_selected + ":")
            if ind != -1:
                variant = variant.replace(" " + self.kmap_selected + ":", '')
                variant = variant.strip('\n')
                self.v_combo.append_text(variant)
        self.v_combo.prepend_text("(none) use defaults")
        self.v_combo.set_active(0)
        self.kmap_v_selected = ''
        self.v_combo.connect("changed", self.on_v_combo_changed)

    def on_ok_clicked(self, button):
        # Dummy
        dialog = Gtk.MessageDialog(parent = self, flags = 0, message_type = Gtk.MessageType.INFO, buttons = Gtk.ButtonsType.OK, text = "Keymap Settings")
        dialog.format_secondary_text("Your settings have been applied")
        dialog.run()
        dialog.destroy()
        Gtk.main_quit()

    def on_help_clicked(self, button):
        help_dialog = HelpDialog(self)
        help_dialog.run()
        help_dialog.destroy()

    def on_cancel_clicked(self, button):
        self.set_orig_kmap()
        Gtk.main_quit()

class HelpDialog(Gtk.Dialog):
    def __init__(self, parent):
        Gtk.Dialog.__init__(self, "Help", parent, 0)
        self.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)

        self.set_default_size(450, 220)

        self.help_header_txt = "<span size=\"large\" weight=\"bold\">Keymap Settings Help</span>"
        self.help_txt = "Please select your desired keyboard layout from the provided lists.\n\n\
Once you press the OK button, your selection will be applied and your keyboard will start using the new mapping.\n\n\
Hint: after pressing OK, you can press alt+shift to toggle between your selected keymap and the US keymap."

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup(self.help_header_txt)

        self.vb = self.get_content_area()
        self.vb.add(self.l_header_txt)

        self.scrolledwindow = Gtk.ScrolledWindow(hexpand = True, vexpand = True)
        self.vb.pack_start(self.scrolledwindow, True, True, 5)

        self.textview = Gtk.TextView(border_width = 20, editable = False, wrap_mode = Gtk.WrapMode.WORD, justification = Gtk.Justification.FILL, cursor_visible = False)
        self.textbuffer = self.textview.get_buffer()
        self.textbuffer.set_text(self.help_txt)

        self.scrolledwindow.add(self.textview)

        self.show_all()

win = GtkXkb()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
