#!/bin/bash

# Copyright 2016-2020  Jay Flood, SP, Brasil
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: brokenman@porteus.org
#
# This is a script to download a live script and update Porteus

# Source some functions
. /usr/share/porteus/porteus-functions
get_colors

########## Start functions

cleanup(){
[ -d $UPDFOLDER ] && rm -rf $UPDFOLDER
exit	
}

logit(){
[ $bose ] && echo "$1" | tee -a $log	
}

########## End functions


########## Start checks
echo
bold "Starting checks ..."

if [ $(grep verbose <<<$@) ] || [ $(grep "\-v" <<<$@) ]; then
	echo "Verbose mode is: on"
	log=/var/log/porteus-update.log
	[ -e $log ] && rm $log
	bose=0
fi

# Check server
SERVER=`awk -F= '/SERVER=/{print$NF}' /etc/porteus.conf`
[ "$SERVER" ] && sayok "Server: $SERVER" || \
{ sayerror "Could not get Porteus server"; exit; }
LIVESCRIPT=$SERVER/i586/testing/live/update-porteus-live
sleep 1

case `uname -m` in
	i?86)
	ARCH=i586
	sayok "Architecture: $ARCH"
	;;
	x86_64)
	ARCH=x86_64
	sayok "Architecture: $ARCH"
	;;
esac
sleep 1

# Root check
if [ `whoami` != "root" ]; then
	sayerror "You must be root to run this script"
	exit
		else
	sayok "User is root"
fi
sleep 1

# Check for Porteus
is_porteus && sayok "Distro is Porteus" || \
{ sayerror "Distro is not Porteus"; exit; }
sleep 1

# Make sure we haven't booted from an ISO
logit "Checking if you booted from an ISO"
if [ `egrep -o "^from=[^ ]+" /etc/bootcmd.cfg | tail -n1 | cut -d= -f2 | grep "\.iso"` ]; then
	BOOTDEVICE=ISO
	sayerror "You can not update when booting from an ISO"
	echo
	red "We can not continue."
	logit "User booted from ISO."
	exit
fi

# Make sure user has a valid base folder
if [ -z "$PORTDIR" ]; then
PORTDIR=`grep -A1 "data found" /var/log/porteus-livedbg | tail -n1`
if [ ! -d $PORTDIR ]; then
	sayerror "Base directory was not detected"
	echo
	red "The porteus directory was not detected. Perhaps you booted into ram?"
	echo "The porteus folder is the path to the directory that contains the"
	echo "folders base, modules, optional, rootcopy and an .sgn file."
	echo "Example: /mnt/sdb1/porteus"
	echo
	green " Enter the path to your porteus folder:"
	read -e -p "> " $answ
	
	# Verify input
	if [ -e $answ/base/000-kernel.xzm ]; then
		BASEDIR=$PORTDIR/base=$answ && unset answ
	else
		red "FATAL ERROR: No base folder located at: $answ"
		exit
	fi
	unset answ
else
	sayok "Porteus directory located"
	logit "PORTDIR:$PORTDIR"
fi
fi
BASEFOLDER=$PORTDIR/base
[ ! -e $BASEFOLDER/000-kernel.xzm ] && { sayerror "Base folder not at: $BASEFOLDER"; cleanup; }
sleep 1

# Make sure user has a writable base folder
logit "Checking for writable base folder ..."
touch $BASEFOLDER/.test && { rm $BASEFOLDER/.test; WRITE=0; } || WRITE=1
if [ "$WRITE" = 0 ]; then
	sayok "Base folder is writable"
		else
	sayerror "Base folder is not writable"
fi
sleep 1

# Check for internet
is_online && sayok "Internet connection confirmed" || \
{ sayerror "An internet connection is required."; cleanup; }

# Get the update codes of local files and put them into an array
for a in 001-core 002-xorg 003-xfce 003-mate 003-cinnamon 003-kde5 003-lxde 003-lxqt 003-openbox; do
	if [ -e /etc/porteus/${a}.ver ]; then
		LVERS+=( "`grep $a /etc/porteus/${a}.ver`" )
		logit "Check for ${a}.ver was successful. It exists."
	fi
done

# Get the live script and run it
echo
logit "Attempting to download live script now ..."
logit "LIVESCRIPT:$LIVESCRIPT"
download $LIVESCRIPT /tmp
if [ ! -e /tmp/update-porteus-live ]; then
	echo
	red "Could not download update-porteus-live:"
	echo $LIVESCRIPT
	cleanup
fi
chmod +x /tmp/update-porteus-live
mv /tmp/update-porteus-live /usr/local/bin
## The argument write tells the live script if the base directory is writable.
## 0=writable 1=not writable
if [ $bose ]; then
	/usr/local/bin/update-porteus-live $WRITE $BASEFOLDER verbose
		else
	/usr/local/bin/update-porteus-live $WRITE $BASEFOLDER
fi
green "You may now close this window."
exit

