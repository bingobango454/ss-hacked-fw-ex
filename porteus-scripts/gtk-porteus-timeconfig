#!/usr/bin/python
##
## This script will act as a front end to the slackware
## script, 'timeconfig', to allow users to set
## their local timezone (if needed) and save
## those settings to a porteus xzm module.

## Original script by ahau, based on gtkdialog examples
## by brokenman and timeconfig, by Patrick Volkerding
## jssouza: ported to pygobject3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import subprocess
import tempfile
from datetime import datetime
#import platform

## Switch to root

'''
class TimeConfig():
    def __init__(self):
        #self.tmp_dir = tempfile.TemporaryDirectory()
        #print('created temporary directory', self.tmp_dir.name)
'''

class GtkTimeConfig(Gtk.Window):
    #time_config = TimeConfig()

    def __init__(self):
        self.dt_zones_init()
        self.gui_init()

    def gui_init(self):
        Gtk.Window.__init__(self, title = "Date and Time Settings", border_width = 5, height_request = 430, width_request = 780, icon_name = "preferences-system-time")
        self.vb = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL)

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup("<span size=\"x-large\" weight=\"bold\">Porteus Date and Time Settings</span>")
        self.vb.pack_start(self.l_header_txt, False, False, 5)

        self.vb.pack_start(Gtk.Separator(), False, False, 5)

        self.scrolledwindow = Gtk.ScrolledWindow(hexpand = True, vexpand = True)
        self.vb.pack_start(self.scrolledwindow, True, True, 5)

        self.vb_inner = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL)

        self.l_dt_header_txt = Gtk.Label(xalign = 0.0)
        self.l_dt_header_txt.set_markup("<span size=\"medium\" weight=\"bold\">Date and Time:</span>")
        self.vb_inner.pack_start(self.l_dt_header_txt, False, False, 5)

        self.label1 = Gtk.Label(xalign = 0.0)
        self.label1.set_markup("Set the system date and/or time if they are incorrect (for example, due to a failed battery)")
        self.vb_inner.pack_start(self.label1, False, False, 2)

        self.hb1 = Gtk.Box(spacing = 5)

        self.d_combo = Gtk.ComboBoxText()
        self.d_combo.set_entry_text_column(0)
        for i in range(1, 32):
            self.d_combo.append_text(str(i))
        self.hb1.pack_start(self.d_combo, False, False, 5)

        self.m_combo = Gtk.ComboBoxText()
        self.m_combo.set_entry_text_column(0)
        for month in self.months:
            self.m_combo.append_text(month)
        self.hb1.pack_start(self.m_combo, False, False, 5)

        self.y_combo = Gtk.ComboBoxText()
        self.y_combo.set_entry_text_column(0)
        for i in range(2020, 2031):
            self.y_combo.append_text(str(i))
        self.hb1.pack_start(self.y_combo, False, False, 5)

        self.h_spin = Gtk.SpinButton.new_with_range(0, 23, 1)
        self.hb1.pack_start(self.h_spin, False, False, 5)
        self.hb1.pack_start(Gtk.Label(label = ":"), False, False, 5)
        self.m_spin = Gtk.SpinButton.new_with_range(0, 59, 1)
        self.hb1.pack_start(self.m_spin, False, False, 5)

        self.set_default_date()

        self.set_img = Gtk.Image.new_from_icon_name("gtk-apply", Gtk.IconSize.BUTTON)
        self.set_dt_button = Gtk.Button.new_with_label("Set Date/Time")
        self.set_dt_button.set_image(self.set_img)
        self.set_dt_button.set_always_show_image(True)
        self.set_dt_button.connect("clicked", self.on_set_dt_button_clicked)
        self.hb1.pack_start(self.set_dt_button, False, False, 5)

        self.vb_inner.pack_start(self.hb1, False, False, 10)

        self.vb_inner.pack_start(Gtk.Separator(), False, False, 5)


        self.l_tz_header_txt = Gtk.Label(xalign = 0.0)
        self.l_tz_header_txt.set_markup("<span size=\"medium\" weight=\"bold\">Timezone:</span>")
        self.vb_inner.pack_start(self.l_tz_header_txt, False, False, 5)


        self.label2 = Gtk.Label(xalign = 0.0)
        self.label2.set_markup("Change your timezone if your hardware clock is set to UTC time, so that the correct time is displayed on your system clock")
        self.vb_inner.pack_start(self.label2, False, False, 2)

        self.rb_local = Gtk.RadioButton.new_with_label_from_widget(None, "My system time is set to localtime")
        self.rb_local.connect("toggled", self.on_tz_toggled, "local")
        self.vb_inner.pack_start(self.rb_local, False, False, 0)

        self.rb_utc = Gtk.RadioButton.new_with_label_from_widget(self.rb_local, "My system time is set to UTC/GMT")
        self.rb_utc.connect("toggled", self.on_tz_toggled, "utc")
        self.vb_inner.pack_start(self.rb_utc, False, False, 0)

        self.hb2 = Gtk.Box(spacing = 5)

        self.hb2.pack_start(Gtk.Label(label = "Timezone:"), False, False, 5)

        self.tz_combo = Gtk.ComboBoxText()
        self.tz_combo.set_entry_text_column(0)
        for tz in self.timezones:
            tz = tz.strip('\n')
            self.tz_combo.append_text(tz)
        self.tz_combo.set_active(self.timezones.index(self.current_timezone))
        self.tz_combo.set_sensitive(False)
        self.hb2.pack_start(self.tz_combo, False, False, 5)

        self.set_img2 = Gtk.Image.new_from_icon_name("gtk-apply", Gtk.IconSize.BUTTON)
        self.set_tz_button = Gtk.Button.new_with_label("Set Timezone")
        self.set_tz_button.set_image(self.set_img2)
        self.set_tz_button.set_always_show_image(True)
        self.set_tz_button.set_sensitive(False)
        #self.set_dt_button.connect("clicked", self.on_set_dt_button_clicked)
        self.hb2.pack_start(self.set_tz_button, False, False, 5)
        
        self.rb_utc.set_active(self.hwclock == "UTC")

        self.help_img = Gtk.Image.new_from_icon_name("help-about", Gtk.IconSize.BUTTON)
        self.help_button = Gtk.Button.new_with_label("Help")
        self.help_button.set_image(self.help_img)
        self.help_button.set_always_show_image(True)
        self.help_button.connect("clicked", self.on_help_clicked)
        self.hb2.pack_start(self.help_button, False, False, 2)

        self.vb_inner.pack_start(self.hb2, False, False, 5)

        self.scrolledwindow.add(self.vb_inner);

        self.hb_bottom = Gtk.Box(spacing = 5, homogeneous = False)
        self.cancel_button = Gtk.Button.new_with_label("Cancel")
        self.cancel_button.connect("clicked", self.on_cancel_clicked)
        self.hb_bottom.pack_end(self.cancel_button, False, False, 2)

        self.vb.pack_start(Gtk.Separator(), False, False, 10)
        self.vb.pack_start(self.hb_bottom, False, False, 5)

        self.add(self.vb)
        self.help_button.grab_focus()
        
    def dt_zones_init(self):
        self.months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        self.timezones = subprocess.run(['sed', '/^US\/Alaska/,/^posixrules/!d', '/usr/sbin/timeconfig'], stdout=subprocess.PIPE).stdout.decode('utf-8').split()
        self.timezones.insert(0, '(None Specified)')

        self.hwclock = subprocess.run(['egrep', '-v', '^#|^$', '/etc/hardwareclock'], stdout=subprocess.PIPE).stdout.decode('utf-8').strip()

        self.get_current_timezone()
        

    def on_tz_toggled(self, button, name):
        if name == "utc" and button.get_active():
            self.tz_combo.set_sensitive(True)
            self.set_tz_button.set_sensitive(True)
        else:
            self.tz_combo.set_sensitive(False)
            self.set_tz_button.set_sensitive(False)

    def set_default_date(self):
        self.d_combo.set_active(datetime.now().day - 1)
        self.m_combo.set_active(datetime.now().month - 1)
        self.y_combo.set_active(0)
        self.h_spin.set_value(datetime.now().hour)
        self.m_spin.set_value(datetime.now().minute)

    def on_help_clicked(self, button):
        help_dialog = HelpDialog(self)
        help_dialog.run()
        help_dialog.destroy()
        
    def on_set_dt_button_clicked(self, button):
        d = self.d_combo.get_active_text()
        m = self.m_combo.get_active_text()
        y = self.y_combo.get_active_text()
        h = self.h_spin.get_value_as_int()
        mn = self.m_spin.get_value_as_int()
        to_set = d + ' ' + m + ' ' + y + ' ' + str(h) + ':' + str(mn)
        try:
            out = subprocess.check_output(['date', '-s', to_set], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as err:
            d_txt = err.output.decode('utf-8')
            d_type = Gtk.MessageType.ERROR
        else:
            d_txt = "Your system time has been set to " + to_set
            d_type = Gtk.MessageType.INFO

        dialog = Gtk.MessageDialog(parent = self, flags = 0, message_type = d_type, buttons = Gtk.ButtonsType.OK, text = "Set Date/Time")
        dialog.format_secondary_text(d_txt)
        dialog.run()
        dialog.destroy()
        
    def get_current_timezone(self):
        p1 = subprocess.Popen(['readlink', '-f', '/etc/localtime-copied-from'], stdout=subprocess.PIPE)
        self.current_timezone = subprocess.run(['sed', 's@/usr/share/zoneinfo/@@g'], stdin = p1.stdout, stdout=subprocess.PIPE).stdout.decode('utf-8').strip('\n')
        if self.current_timezone  == "Factory":
            self.current_timezone = "(None Specified)"

    def on_cancel_clicked(self, button):
        Gtk.main_quit()

class HelpDialog(Gtk.Dialog):
    def __init__(self, parent):
        Gtk.Dialog.__init__(self, "Help", parent, 0)
        self.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)

        self.set_default_size(550, 250)

        self.help_header_txt = "<span size=\"large\" weight=\"bold\">Setting Timezone</span>"
        self.help_txt = "If your system is showing the incorrect hour, then it is likely set to UTC.  If that is the case, then you should select UTC below \
and then choose your timezone from the dropdown list.\n\n\
Note that you cannot select localtime and choose a timezone, as this is generally not needed in Porteus and it may alter your system time at the BIOS level.\n\n\
If you want to set your system to localtime and select a timezone, please run the timeconfig utility inside a terminal."

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup(self.help_header_txt)

        self.vb = self.get_content_area()
        self.vb.add(self.l_header_txt)

        self.scrolledwindow = Gtk.ScrolledWindow(hexpand = True, vexpand = True)
        self.vb.pack_start(self.scrolledwindow, True, True, 5)

        self.textview = Gtk.TextView(border_width = 20, editable = False, wrap_mode = Gtk.WrapMode.WORD, justification = Gtk.Justification.FILL, cursor_visible = False)
        self.textbuffer = self.textview.get_buffer()
        self.textbuffer.set_text(self.help_txt)

        self.scrolledwindow.add(self.textview)

        self.show_all()

win = GtkTimeConfig()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
