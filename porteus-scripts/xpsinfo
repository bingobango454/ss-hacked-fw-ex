#!/usr/bin/python
#
# Authors: jssouza, ncmprhnsbl
#
# A script to show users information about their system and Porteus

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from subprocess import Popen, PIPE, run, DEVNULL
from tempfile import TemporaryDirectory
from platform import release
from os import path, listdir, getenv, remove, system, getuid
from shutil import copy2

## Make sure we're in X
display = getenv('DISPLAY')
if display == None:
    print("This program requires an X session!")
    quit()

## prompt root password(gui psu) and re-execute? probly a bit dirty..
## using subprocess rather than os.system() to be script agnostic..
user = getuid()
if user != 0:
    print("You must be root to run this!")
    this_script = path.abspath(__file__)
    Popen(['psu', this_script])
    quit()

class PSInfo():
    def __init__(self):
        self.tmp_dir = TemporaryDirectory()
        # print('created temporary directory', self.tmp_dir.name)
        self.init_infos()

    def init_infos(self):
        # Kernel modules
        outfile = self.tmp_dir.name + "/kmods.txt"
        with open(outfile, "w") as fd:
            p1 = Popen('/sbin/lsmod', stdout=PIPE)
            p2 = Popen(['awk', '{print$1}'], stdin = p1.stdout, stdout = fd)
            p2.communicate()

        # System
        outfile = self.tmp_dir.name + "/system.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['/usr/sbin/dmidecode', '-t', '1'], stdout=PIPE)
            p2 = Popen(['sed', '-e', '/dmidecode/d', '-e', '/SMBIOS/d', '-e', '/Handle/d', '-e', '/^$/d'], stdin = p1.stdout, stdout = fd)
            p2.communicate()

        # Processor
        outfile = self.tmp_dir.name + "/processor.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['egrep', 'vendor|name|cores|flags|MHz|address|cpuid', '/proc/cpuinfo'], stdout=PIPE)
            p2 = Popen(['sort', '-u'], stdin = p1.stdout, stdout = fd)
            p2.communicate()
        with open(outfile, "a") as fd:
            p1 = Popen(['/usr/sbin/dmidecode', '-t', '4'], stdout=PIPE)
            p2 = Popen(['egrep', 'Family|ACPI|APIC|PGE|threading|Thermal|Speed|Clock|Thread|capable'], stdin = p1.stdout, stdout = fd)
            p2.communicate()

        # Motherboard
        outfile = self.tmp_dir.name + "/motherboard.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['/usr/sbin/dmidecode', '-t', '1'], stdout=PIPE)
            p2 = Popen(['egrep', 'Manufacturer|Product Name|Serial Number'], stdin = p1.stdout, stdout=PIPE)
            p3 = Popen(['tr', '-d', '\t'], stdin = p2.stdout, stdout = fd)
            p3.communicate()

        # Battery
        outfile = self.tmp_dir.name + "/battery.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['/usr/sbin/dmidecode', '-t', '22'], stdout=PIPE)
            p2 = Popen(['sed', '-e', '/dmidecode/d', '-e', '/SMBIOS/d', '-e', '/Handle/d', '-e', '/^$/d'], stdin = p1.stdout, stdout = fd)
            p2.communicate()

        # Bios
        outfile = self.tmp_dir.name + "/bios.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['/usr/sbin/dmidecode', '-t', '0'], stdout=PIPE)
            p2 = Popen(['sed', '-e', '/dmidecode/d', '-e', '/SMBIOS/d', '-e', '/Handle/d', '-e', '/^$/d'], stdin = p1.stdout, stdout = fd)
            p2.communicate()

        # Memory
        outfile = self.tmp_dir.name + "/memory.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['/usr/sbin/dmidecode', '-t', '16'], stdout=PIPE)
            p2 = Popen(['egrep', 'Capacity|Devices|Correction|Use:'], stdin = p1.stdout, stdout=PIPE)
            p3 = Popen(['sed', 's/^[ \t]*//'], stdin = p2.stdout, stdout = fd)
            p3.communicate()
        with open(outfile, "a") as fd:
            with open('/proc/meminfo') as f:
                fd.write( f.read() )

        # Screen
        outfile = self.tmp_dir.name + "/screen.txt"
        with open(outfile, "w") as fd:
            p1 = Popen('xrandr', stdout = fd)
            p1.communicate()

        # Graphics
        outfile = self.tmp_dir.name + "/graphics.txt"
        with open(outfile, "w") as fd:
            p1 = Popen("for I in $(/sbin/lspci | awk '/VGA/{print $1}');do /sbin/lspci -v -s $I; done", shell=True, stdout = fd)
            p1.communicate()

        # Sound
        outfile = self.tmp_dir.name + "/sound.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['grep', '":"', '/proc/asound/cards'], stdout=PIPE)
            p2 = Popen(['awk', '-F:', '{print$NF}'], stdin = p1.stdout, stdout = fd)
            p2.communicate()
        with open(outfile, "a") as fd:
            p1 = Popen('/sbin/lspci', stdout=PIPE)
            p2 = Popen(['grep', 'Audio'], stdin = p1.stdout, stdout=PIPE)
            p3 = Popen(['awk', '-F:', '{print$NF}'], stdin = p1.stdout, stdout = fd)
            p3.communicate()
        with open(outfile, "a") as fd:
            p1 = Popen(['aplay', '-l'], stdout = fd)
            p1.communicate()

        # Optical drive
        outfile = self.tmp_dir.name + "/optical.txt"
        with open(outfile, "w") as fd:
            pres1 = Popen(['ls', '-l', "/dev/cdrom"], stdout=PIPE)
            pres = run(['awk', '{print$NF}'], stdin = pres1.stdout, stdout=DEVNULL).returncode
            if int(pres) == 0:
                p1 = Popen("cat /proc/sys/dev/cdrom/info | egrep 'name:|speed:|slots:' | sed '/change/d'", shell=True, stdout = fd)
                p1.communicate()
                with open(outfile, "a") as fd:
                    p2 = Popen('cdrecord -prcap dev=/dev/cdrom | egrep "Device type|Vendor_info|Identifikation|Revision"', shell=True, stdout = fd)
                    p2.communicate()
                    fd.write("\nPROFILE:\n")
                with open(outfile, "a") as fd:
                    p3 = Popen('cdrecord -prcap dev=/dev/cdrom | grep Profile', shell=True, stdout = fd)
                    p3.communicate()
                    fd.write("\nCAPABILITIES:\n")
                with open(outfile, "a") as fd:
                    p4 = Popen('cdrecord -prcap dev=/dev/cdrom | egrep "Does|Write|Feature" | sort -u', shell=True, stdout = fd)
                    p4.communicate()
            else:
                fd.write("No optical device found at /dev/cdrom.")

        # Webcam
        outfile = self.tmp_dir.name + "/webcam.txt"
        with open(outfile, "w") as fd:
            cam = run("lsusb | grep webcam", shell=True, stdout=DEVNULL).returncode
            if cam == 0:
                p1 = Popen("lsusb | grep webcam", shell=True, stdout = fd)
                p1.communicate()
                with open(outfile, "a") as fd:
                    p1 = Popen("dmesg | grep webcam", shell=True, stdout = fd)
                    p1.communicate()
            else:
                fd.write("No webcam found.")

        # Usb Devices
        outfile = self.tmp_dir.name + "/usb1.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['lsusb', '-t'], stdout = fd)
            p1.communicate()

        # Drives
        outfile = self.tmp_dir.name + "/drives.txt"
        with open(outfile, "w") as fd:
            drvs = run("df | sed -e '/aufs/d' -e '/Used/d' | awk '{print$1}' | tr -d [:digit:] | sort -u", shell=True, stdout=PIPE).stdout.decode('utf-8').split()
            for a in drvs:
                b = run(["echo " + a + " | sed 's@/dev/@@g'"], shell=True, stdout=PIPE).stdout.decode('utf-8').strip()
                if path.isfile('/sys/block/' + b + '/removable') is True:
                    with open('/sys/block/' + b + '/removable') as f:
                        c = f.read().strip()
                        if int(c) == 0:
                            d = run(['hdparm -I ' + a], shell=True, stdout=PIPE).stdout.decode('utf-8')
                            fd.write(d)

        # Usb drives
        outfile = self.tmp_dir.name + "/usb2.txt"
        with open(outfile, "a") as fd:
            base = run("ls -l /sys/block/|awk '{print$9}'|grep .d.", shell=True, stdout=PIPE).stdout.decode('utf-8').split()
            for a in base:
                with open("/sys/block/" + a + "/removable") as f:
                    rem = f.read().strip()
                    if int(rem) == 1:
                        fd.write(a + " is removable")
                        mntd = run(['mount | grep ' + a], shell=True, stdout=DEVNULL).returncode
                        if int(mntd) == 0:
                            fd.write("\nMOUNTED: yes")
                        else:
                            fd.write("\nMOUNTED: no")
                        with open("/sys/block/" + a + "/device/model") as f:
                            name = f.read().strip()
                            fd.write("\nNAME: " + name)
                        with open("/sys/block/" + a + "/device/vendor") as f:
                            vendor = f.read().strip()
                            fd.write("\nVENDOR: " + vendor)
                        with open("/sys/block/" + a + "/device/state") as f:
                            state = f.read().strip()
                            fd.write("\nSTATE: " + state)
                        size = run("fdisk -l | grep 'Disk /dev/" + a + "' | awk '{print$3}'", shell=True, stdout=PIPE).stdout.decode('utf-8').strip()
                        fd.write("\nSIZE: " + size + " GiB\n\n")

        # Partitions
        outfile = self.tmp_dir.name + "/partitions.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['df', '-T'], stdout=PIPE)
            p2 = run(['sed', '/aufs/d'], stdin = p1.stdout, stdout=PIPE).stdout.decode('utf-8')
            fd.write(p2)
        with open(outfile, "a") as fd:
            p1 = run("for a in $(df|sed -e '/Used/d' -e '/aufs/d'|awk '{print$1}'); do blkid|grep $a; done", shell=True, stdout=PIPE).stdout.decode('utf-8')
            fd.write("\n\nLABEL/UUID INFO:\n\n" + p1)

        # Ethernet
        outfile = self.tmp_dir.name + "/ethernet.txt"
        with open(outfile, "w") as fd:
            p1 = Popen("for I in $(/sbin/lspci | awk '/Ethernet/{print $1}'); do /sbin/lspci -v -s $I; done", shell=True, stdout = fd)
            p1.communicate()

        # Wireless
        outfile = self.tmp_dir.name + "/wireless.txt"
        with open(outfile, "w") as fd:
            is_wlan = run(['/sbin/lspci | grep "Wireless"'], shell=True, stdout=DEVNULL).returncode
            ## in case of usb wireless
            is_uwlan = run(['lsusb | grep "WLAN"'], shell=True, stdout=DEVNULL).returncode
            if int(is_wlan) == 0:
                p1 = Popen("for I in $(/sbin/lspci | awk '/Wireless/{print $1}'); do /sbin/lspci -v -s $I; done", shell=True, stdout = fd)
                p1.communicate()
            elif int(is_uwlan) == 0:
                p1 = Popen("for I in $(lsusb | awk '/WLAN/{print $6}'); do lsusb -v -d $I; done", shell=True, stdout = fd)
                p1.communicate()
            else:
                fd.write("No wireless device found")

        # Mac address
        outfile = self.tmp_dir.name + "/macaddress.txt"
        with open(outfile, "w") as fd:
            p1 = run("for dev in wlan eth; do dev=$(ifconfig|grep -A3 $dev[0-9]|head -n1|awk '{print$1}'); mac=$(ifconfig $dev|grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'); echo \"$dev $mac\"; done", shell=True, stdout = fd)
            # ~ fd.write("placeholder")

        # IP address
        outfile = self.tmp_dir.name + "/ipaddress.txt"
        with open(outfile, "w") as fd:
            p1 = Popen('/sbin/ifconfig', stdout=PIPE)
            p2 = Popen("egrep -A7 'eth[0-9]|[wlan[0-9]'", shell=True, stdin = p1.stdout, stdout=PIPE)
            p3 = Popen(['grep', 'inet'], stdin = p2.stdout, stdout=PIPE)
            p4 = Popen("sed 's/^[\t]*//'", shell=True, stdin = p3.stdout, stdout = fd)
            p4.communicate()

        # Nameserver
        outfile = self.tmp_dir.name + "/nameserver.txt"
        with open(outfile, "w") as fd:
            ns = run(['sed', '/#/d', '/etc/resolv.conf'], stdout=DEVNULL).returncode
            if ns == 0:
                p1 = Popen(['sed', '/#/d', '/etc/resolv.conf'], stdout = fd)
                p1.communicate()
            else:
                fd.write("No nameserver found.")

        # Routing
        outfile = self.tmp_dir.name + "/routing.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['route', '-ne'], stdout = fd)
            p1.communicate()

        # Dmesg
        outfile = self.tmp_dir.name + "/dmesg.txt"
        with open(outfile, "w") as fd:
            p1 = Popen('dmesg', stdout = fd)
            p1.communicate()

        # Messages
        outfile = self.tmp_dir.name + "/messages.txt"
        with open(outfile, "w") as fd:
            with open('/var/log/messages') as f:
                fd.write( f.read() )

        # Xorg
        outfile = self.tmp_dir.name + "/xorg.txt"
        with open(outfile, "w") as fd:
            try:
                with open('/var/log/Xorg.0.log') as f:
                    fd.write( f.read() )
            except FileNotFoundError:
                    fd.write("No Xorg log found.")
            

        # Xsession
        outfile = self.tmp_dir.name + "/xsession.txt"
        with open(outfile, "w") as fd:
            user = run("awk -F: '$6 ~ /\/home/ && $3 >= 500 {print $1}' /etc/passwd", shell=True, stdout=PIPE).stdout.decode('utf-8').strip()
            rxerr = path.isfile('/root/.xsession-errors')
            uxerr = path.isfile('/home/' + user + '/.xsession-errors')
            if rxerr is True:
                with open('/root/.xsession-errors') as fx:
                    fd.write( fx.read() )
            elif uxerr is True:
                with open('/home/' + user + '/.xsession-errors') as fx:
                    fd.write( fx.read() )
            else:
                fd.write("No xsession-errors found")

        # Syslog
        outfile = self.tmp_dir.name + "/syslog.txt"
        with open(outfile, "w") as fd:
            with open('/var/log/syslog') as f:
                fd.write( f.read() )

        # Lastboot
        outfile = self.tmp_dir.name + "/lastboot.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['who','-b'], stdout=PIPE)
            p2 = Popen(['sed', 's/^[ \t]*//'], stdin = p1.stdout, stdout = fd)
            p2.communicate()

        # Users
        outfile = self.tmp_dir.name + "/users.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['grep', '-v', '"\!"', '/etc/shadow'], stdout=PIPE)
            p2 = Popen(['cut','-d:','-f1'], stdin = p1.stdout, stdout = fd)
            p2.communicate()

        # Version
        outfile = self.tmp_dir.name + "/version.txt"
        with open(outfile, "w") as fd:
            with open('/etc/porteus-version') as f:
                fd.write( f.read() )

        # Modules
        outfile = self.tmp_dir.name + "/modules.txt"
        with open(outfile, "a") as fd:
            mods = listdir('/mnt/live/memory/images')
            for entry in sorted(mods):
                fd.write(entry + "\n")

        # Packages
        outfile = self.tmp_dir.name + "/packages.txt"
        with open(outfile, "w") as fd:

            pkgs = listdir('/var/lib/pkgtools/packages')
            for entry in sorted(pkgs):
                fd.write(entry + "\n")

        # Rootcopy
        outfile = self.tmp_dir.name + "/rootcopy.txt"
        with open(outfile, "w") as fd:
            rcpy = run('find $PORTDIR/rootcopy -name "*"', shell=True, stdout=PIPE).stdout.decode('utf-8')
            if rcpy is not None:
                p1 = Popen('find $PORTDIR/rootcopy -name "*"', shell=True, stdout = fd)
                p1.communicate()
            else:
                fd.write("No rootcopy files present.")

        # Boot_info
        outfile = self.tmp_dir.name + "/bootinfo.txt"
        with open(outfile, "w") as fd:
            with open('/var/log/porteus-livedbg') as f:
                fd.write( f.read() )

        # Bootdisk
        outfile = self.tmp_dir.name + "/bootdisk.txt"
        with open(outfile, "w") as fd:
            bootdev = getenv('BOOTDEV')
            fd.write("You booted from: " + bootdev)

        # lspci
        outfile = self.tmp_dir.name + "/lspci.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['/sbin/lspci', '-knn'], stdout = fd)
            p1.communicate()

        # lsmod
        outfile = self.tmp_dir.name + "/lsmod.txt"
        with open(outfile, "w") as fd:
            p1 = Popen(['lsmod'], stdout = fd)
            p1.communicate()

    def get_info(self, section):
        outfile = self.tmp_dir.name + "/" + section + ".txt"
        with open(outfile) as fd:
            return fd.read()

    def get_kernel_version(self):
        return release()


class XPSInfo(Gtk.Window):
    system_info = PSInfo()

    def __init__(self):
        Gtk.Window.__init__(self, title = "Porteus System Info", border_width = 5, height_request = 460, width_request = 650, icon_name = "hwinfo")

        self.vb = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, homogeneous = False)

        self.l_header_txt = Gtk.Label(justify = Gtk.Justification.CENTER)
        self.l_header_txt.set_markup("<span size=\"x-large\" weight=\"normal\">Welcome to the Porteus system information page</span>")

        self.vb.pack_start(self.l_header_txt, False, False, 5)

        self.main_notebook = Gtk.Notebook()

        self.init_general_page()
        self.init_media_page()
        self.init_drives_page()
        self.init_network_page()
        self.init_logs_page()
        self.init_porteus_page()
        self.init_misc_page()

        self.vb.pack_start(self.main_notebook, True, True, 0)
        self.add(self.vb)

        self.hb_bottom = Gtk.Box(spacing = 5, homogeneous = False)

        self.cancel_button = Gtk.Button.new_with_label("Cancel")
        #self.cancel_button.get_style_context().add_class("suggested-action")
        self.cancel_button.connect("clicked", self.on_cancel_clicked)
        self.hb_bottom.pack_end(self.cancel_button, False, False, 2)

        self.full_button = Gtk.Button.new_with_label("Dump full report")
        self.full_button.connect("clicked", self.on_full_clicked)
        self.hb_bottom.pack_end(self.full_button, False, False, 2)

        self.current_button = Gtk.Button.new_with_label("Dump current file")
        self.current_button.connect("clicked", self.on_current_clicked)
        self.hb_bottom.pack_end(self.current_button, False, False, 2)

        self.open_button = Gtk.Button.new_with_label("Open current file")
        self.open_button.connect("clicked", self.on_open_clicked)
        self.hb_bottom.pack_end(self.open_button, False, False, 2)

        self.vb.pack_start(self.hb_bottom, False, False, 6)

    def init_general_page(self):
        self.general_page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        self.general_notebook = Gtk.Notebook(tab_pos = 0, scrollable = True)

        self.kernel_page = self.init_page_kernel(self.general_notebook, 'Kernel', self.system_info.get_info("kmods"))
        self.kernel_page.pack_start(Gtk.Label(label = "CURRENT KERNEL: " + self.system_info.get_kernel_version()), False, False, 10)
        self.l_modhdr = Gtk.Label(label = "MODULES LOADED:", xalign = 0.0)
        self.kernel_page.pack_start(self.l_modhdr, False, False, 0)

        self.system_page = self.init_page(self.general_notebook, 'System', 'SYSTEM INFO: ', self.system_info.get_info("system"))
        self.processor_page = self.init_page(self.general_notebook, 'Processor', 'CPU INFO: ', self.system_info.get_info("processor"))
        self.motherboard_page = self.init_page(self.general_notebook, 'Motherboard', 'MOTHERBOARD: ', self.system_info.get_info("motherboard"))
        self.battery_page = self.init_page(self.general_notebook, 'Battery', 'BATTERY INFO: ', self.system_info.get_info("battery"))
        self.bios_page = self.init_page(self.general_notebook, 'Bios', 'BIOS INFO: ', self.system_info.get_info("bios"))
        self.memory_page = self.init_page(self.general_notebook, 'Memory', 'MEMORY/SWAP: ', self.system_info.get_info("memory"))
        self.screen_page = self.init_page(self.general_notebook, 'Screen', 'SCREEN INFO: ', self.system_info.get_info("screen"))

        self.general_page.pack_start(self.general_notebook, True, True, 5)
        self.main_notebook.append_page(self.general_page, Gtk.Label(label = 'General Info'))

    def init_media_page(self):
        self.media_page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        self.media_notebook = Gtk.Notebook(tab_pos = 0, scrollable = True)

        self.graphics_page = self.init_page(self.media_notebook, 'Graphics', 'GRAPHICS: ', self.system_info.get_info("graphics"))
        self.sound_page = self.init_page(self.media_notebook, 'Sound Cards', 'SOUND CARDS: ', self.system_info.get_info("sound"))
        self.optical_page = self.init_page(self.media_notebook, 'Optical Drive', 'CD/DVD DEVICE ', self.system_info.get_info("optical"))
        self.webcam_page = self.init_page(self.media_notebook, 'Webcam', 'WEBCAM INFO: ', self.system_info.get_info("webcam"))
        self.usb_page = self.init_page(self.media_notebook, 'Usb Devices', 'USB DEVICES: ', self.system_info.get_info("usb1"))

        self.media_page.pack_start(self.media_notebook, True, True, 5)
        self.main_notebook.append_page(self.media_page, Gtk.Label(label = 'Media'))


    def init_drives_page(self):
        self.drives_page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        self.drives_notebook = Gtk.Notebook(tab_pos = 0, scrollable = True)

        self.idrives_page = self.init_page(self.drives_notebook, 'Internal Drives', 'DRIVE INFO: ', self.system_info.get_info("drives"))
        self.usb_page = self.init_page(self.drives_notebook, 'USB', 'USB INFO: ', self.system_info.get_info("usb2"))
        self.partitions_page = self.init_page(self.drives_notebook, 'Partitions', 'PARTITION INFO: ', self.system_info.get_info("partitions"))

        self.drives_page.pack_start(self.drives_notebook, True, True, 5)
        self.main_notebook.append_page(self.drives_page, Gtk.Label(label = 'Drives'))

    def init_network_page(self):
        self.network_page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        self.network_notebook = Gtk.Notebook(tab_pos = 0, scrollable = True)

        self.ethernet_page = self.init_page(self.network_notebook, 'Ethernet', 'ETHERNET INFO: ', self.system_info.get_info("ethernet"))
        self.wireless_page = self.init_page(self.network_notebook, 'Wireless', 'WIRELESS INFO: ', self.system_info.get_info("wireless"))
        self.macaddress_page = self.init_page(self.network_notebook, 'Mac Address', 'MAC ADDRESS INFO: ', self.system_info.get_info("macaddress"))
        self.ipaddress_page = self.init_page(self.network_notebook, 'IP Address', 'IP INFO: ', self.system_info.get_info("ipaddress"))
        self.nameserver_page = self.init_page(self.network_notebook, 'Name Server', 'NAMESERVER INFO: ', self.system_info.get_info("nameserver"))
        self.routing_page = self.init_page(self.network_notebook, 'Routing', 'ROUTING INFO: ', self.system_info.get_info("routing"))

        self.network_page.pack_start(self.network_notebook, True, True, 5)
        self.main_notebook.append_page(self.network_page, Gtk.Label(label = 'Networks'))

    def init_logs_page(self):
        self.logs_page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        self.logs_notebook = Gtk.Notebook(tab_pos = 0, scrollable = True)

        self.dmesg_page = self.init_page(self.logs_notebook, 'Dmseg', 'DMESG INFO: ', self.system_info.get_info("dmesg"))
        self.messages_page = self.init_page(self.logs_notebook, 'Messages', '/var/log/messages INFO: ', self.system_info.get_info("messages"))
        self.xorg_page = self.init_page(self.logs_notebook, 'Xorg', 'XORG INFO: ', self.system_info.get_info("xorg"))
        self.xsession_page = self.init_page(self.logs_notebook, 'Xsession', 'XSESSION ERRORS: ', self.system_info.get_info("xsession"))
        self.syslog_page = self.init_page(self.logs_notebook, 'Syslog', 'SYSLOG: ', self.system_info.get_info("syslog"))
        self.lastboot_page = self.init_page(self.logs_notebook, 'Lastboot', 'LAST BOOT: ', self.system_info.get_info("lastboot"))

        self.logs_page.pack_start(self.logs_notebook, True, True, 5)
        self.main_notebook.append_page(self.logs_page, Gtk.Label(label = 'Logs'))

    def init_porteus_page(self):
        self.porteus_page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        self.porteus_notebook = Gtk.Notebook(tab_pos = 0, scrollable = True)

        self.users_page = self.init_page(self.porteus_notebook, 'Users', 'USER INFO: ', self.system_info.get_info("users"))
        self.version_page = self.init_page(self.porteus_notebook, 'Version', 'PORTEUS VERSION: ', self.system_info.get_info("version"))
        self.modules_page = self.init_page(self.porteus_notebook, 'Modules', 'MODULES LOADED: ', self.system_info.get_info("modules"))
        self.packages_page = self.init_page(self.porteus_notebook, 'Packages', 'PACKAGES INSTALLED: ', self.system_info.get_info("packages"))
        self.rootcopy_page = self.init_page(self.porteus_notebook, 'Rootcopy', 'ROOTCOPY INFO: ', self.system_info.get_info("rootcopy"))
        self.bootinfo_page = self.init_page(self.porteus_notebook, 'Bootinfo', 'BOOTINFO: ', self.system_info.get_info("bootinfo"))
        self.bootdisk_page = self.init_page(self.porteus_notebook, 'Bootdisk', 'BOOT DISK: ', self.system_info.get_info("bootdisk"))

        self.porteus_page.pack_start(self.porteus_notebook, True, True, 5)
        self.main_notebook.append_page(self.porteus_page, Gtk.Label(label = 'Porteus'))

    def init_misc_page(self):
        self.misc_page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        self.misc_notebook = Gtk.Notebook(tab_pos = 0, scrollable = True)

        self.lspci_page = self.init_page(self.misc_notebook, 'lspci', 'lspci output: ', self.system_info.get_info("lspci"))
        self.lsmod_page = self.init_page(self.misc_notebook, 'lsmod', 'lsmod output: ', self.system_info.get_info("lsmod"))

        self.misc_page.pack_start(self.misc_notebook, True, True, 5)
        self.main_notebook.append_page(self.misc_page, Gtk.Label(label = 'Misc'))

    def init_page(self, parent, page_label, page_header, text):
        page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        parent.append_page(page, Gtk.Label(label = page_label, xalign = 0.0))
        page.pack_start(Gtk.Label(label = page_header, xalign = 0.0), False, False, 10)
        scrolledwindow = Gtk.ScrolledWindow(hexpand = True, vexpand = True)
        textview = Gtk.TextView(border_width = 16, cursor_visible = False, editable = False, wrap_mode = True)
        textview.get_buffer().set_text(text)
        scrolledwindow.add(textview)
        page.pack_end(scrolledwindow, True, True, 0)
        return page

    def init_page_kernel(self, parent, page_label, text):
        page = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL, border_width = 10)
        parent.append_page(page, Gtk.Label(label = page_label, xalign = 0.0))
        scrolledwindow = Gtk.ScrolledWindow(hexpand = True, vexpand = True)
        textview = Gtk.TextView(border_width = 16, cursor_visible = False, editable = False, wrap_mode = True)
        textview.get_buffer().set_text(text)
        scrolledwindow.add(textview)
        page.pack_end(scrolledwindow, True, True, 0)
        return page

    def on_cancel_clicked(self, button):
        Gtk.main_quit()

    def on_full_clicked(self, button):
        tmp_dir = self.system_info.tmp_dir.name
        infos = listdir(tmp_dir)
        reprt = "/tmp/psinfo_report.txt"
        is_reprt = path.isfile(reprt)
        if is_reprt:
            remove(reprt)
        for i in infos:
            with open(tmp_dir + "/" + i) as fd:
                with open(reprt, "a") as f:
                    f.write("\n" + "################################################################")
                    f.write("\n" + "\n" + i + "\n" + "\n")
                    f.write( fd.read() )
        ## nice and concise but the resulting subheaders are: "foo.txt"
        if is_reprt:
            system('/usr/share/porteus/gtkdialog.py -p "Report Complete" -s "Your system info is ready at /tmp/psinfo_report ." -d info')

    def the_current_page(self):
        ## clunky as .. got to be a better way :0
        current_page = self.main_notebook.get_current_page()
        if current_page == 0:
            current_sub_page = self.general_notebook.get_current_page()
            if current_sub_page == 0:
                target_page = "/kmods.txt"
            elif current_sub_page == 1:
                target_page = "/system.txt"
            elif current_sub_page == 2:
                target_page = "/processor.txt"
            elif current_sub_page == 3:
                target_page = "/motherboard.txt"
            elif current_sub_page == 4:
                target_page = "/battery.txt"
            elif current_sub_page == 5:
                target_page = "/bios.txt"
            elif current_sub_page == 6:
                target_page = "/memory.txt"
            elif current_sub_page == 7:
                target_page = "/screen.txt"
        elif current_page == 1:
            current_sub_page = self.media_notebook.get_current_page()
            if current_sub_page == 0:
                target_page = "/graphics.txt"
            elif current_sub_page == 1:
                target_page = "/sound.txt"
            elif current_sub_page == 2:
                target_page = "/optical.txt"
            elif current_sub_page == 3:
                target_page = "/webcam.txt"
            elif current_sub_page == 4:
                target_page = "/usb1.txt"
        elif current_page == 2:
            current_sub_page = self.drives_notebook.get_current_page()
            if current_sub_page == 0:
                target_page = "/drives.txt"
            elif current_sub_page == 1:
                target_page = "/usb2.txt"
            elif current_sub_page == 2:
                target_page = "/partitions.txt"
        elif current_page == 3:
            current_sub_page = self.network_notebook.get_current_page()
            if current_sub_page == 0:
                target_page = "/ethernet.txt"
            elif current_sub_page == 1:
                target_page = "/wireless.txt"
            elif current_sub_page == 2:
                target_page = "/macaddress.txt"
            elif current_sub_page == 3:
                target_page = "/ipaddress.txt"
            elif current_sub_page == 4:
                target_page = "/nameserver.txt"
            elif current_sub_page == 5:
                target_page = "/routing.txt"
        elif current_page == 4:
            current_sub_page = self.logs_notebook.get_current_page()
            if current_sub_page == 0:
                target_page = "/dmesg.txt"
            elif current_sub_page == 1:
                target_page = "/messages.txt"
            elif current_sub_page == 2:
                target_page = "/xorg.txt"
            elif current_sub_page == 3:
                target_page = "/xsession.txt"
            elif current_sub_page == 4:
                target_page = "/syslog.txt"
            elif current_sub_page == 5:
                target_page = "/lastboot.txt"
        elif current_page == 5:
            current_sub_page = self.porteus_notebook.get_current_page()
            if current_sub_page == 0:
                target_page = "/users.txt"
            elif current_sub_page == 1:
                target_page = "/version.txt"
            elif current_sub_page == 2:
                target_page = "/modules.txt"
            elif current_sub_page == 3:
                target_page = "/packages.txt"
            elif current_sub_page == 4:
                target_page = "/rootcopy.txt"
            elif current_sub_page == 5:
                target_page = "/bootinfo.txt"
            elif current_sub_page == 6:
                target_page = "/bootdisk.txt"
        elif current_page == 6:
            current_sub_page = self.misc_notebook.get_current_page()
            if current_sub_page == 0:
                target_page = "/lspci.txt"
            elif current_sub_page == 1:
                target_page = "/lsmod.txt"
        print(current_page, current_sub_page, target_page)
        return target_page

    def on_current_clicked(self, button):
        print("Dump current file")
        home = getenv('HOME')
        copy2(self.system_info.tmp_dir.name + "/" + self.the_current_page(), home)
        system('/usr/share/porteus/gtkdialog.py -p "Report Complete" -s "Your system info is ready at ' + home+ '/' + self.the_current_page() + '." -d info')

    def on_open_clicked(self, button):
        print("Open current file:")
        run(['/opt/porteus-scripts/xorg/editor', self.system_info.tmp_dir.name + "/" + self.the_current_page()])

win = XPSInfo()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
