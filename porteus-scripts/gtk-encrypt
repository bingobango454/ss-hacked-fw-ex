#!/usr/bin/python
## encrypt script in pygobject3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from subprocess import run
from os import path, remove

class GtkEncrypt(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title = "Encrypt", border_width = 15, height_request = 300, width_request = 450, icon_name = "channel-secure-symbolic")
        self.vb = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL)

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup("<span size=\"x-large\" weight=\"bold\">Encrypt a file or folder</span>")
        self.vb.pack_start(self.l_header_txt, False, False, 5)

        self.vb.pack_start(Gtk.Separator(), False, False, 5)

        self.text = Gtk.Label()
        self.text.set_markup("<span>Your chosen file/folder will be encrypted and the original\n then removed from the system. If a folder is chosen it will\n be converted into a single encrypted file which will need to\n be decrypted using this application. DO NOT forget your\n password or you will lose you data!</span>")
        self.vb.add(self.text)

        self.vb.pack_start(Gtk.Separator(), False, False, 10)

        self.grid = Gtk.Grid(row_spacing = 10, column_spacing = 10, column_homogeneous = True)
        self.entry1_name = Gtk.Label(xalign = 0.0)
        self.entry1_name.set_markup("\tFolder: ")
        self.grid.attach(self.entry1_name, 0, 0, 1, 1)
        self.entry1 = Gtk.Entry()
        self.grid.attach(self.entry1, 2, 0, 3, 1)
        self.add_folder_button = Gtk.Button.new_from_icon_name("folder-new-symbolic", Gtk.IconSize.BUTTON)
        self.add_folder_button.connect("clicked", self.on_add_folder_button_clicked)
        self.grid.attach(self.add_folder_button, 5, 0, 1, 1)
        self.entry2_name = Gtk.Label(xalign = 0.0)
        self.entry2_name.set_markup("\tFile: ")
        self.grid.attach(self.entry2_name, 0, 2, 1, 1)
        self.entry2 = Gtk.Entry()
        self.grid.attach(self.entry2, 2, 2, 3, 1)
        self.add_file_button = Gtk.Button.new_from_icon_name("text-x-generic-symbolic", Gtk.IconSize.BUTTON)
        self.add_file_button.connect("clicked", self.on_add_file_button_clicked)
        self.grid.attach(self.add_file_button, 5, 2, 1, 1)
        self.vb.add(self.grid)

        self.hb_bottom = Gtk.Box(spacing = 5, homogeneous = False)
        self.cancel_button = Gtk.Button.new_with_label("Cancel")
        self.cancel_button.connect("clicked", self.on_cancel_clicked)
        self.hb_bottom.pack_end(self.cancel_button, False, False, 2)

        self.ok_button = Gtk.Button.new_with_label("OK")
        self.ok_button.connect("clicked", self.on_ok_clicked)
        # ~ self.ok_button.set_sensitive(False)
        self.hb_bottom.pack_end(self.ok_button, False, False, 2)

        self.vb.pack_end(self.hb_bottom, False, False, 5)
        self.vb.pack_end(Gtk.Separator(), False, False, 10)
        self.add(self.vb)

    def passwd(self):
        pw_dialog = PasswordDialog(self)
        response = pw_dialog.run()
        if response == Gtk.ResponseType.OK:
            pw1 = pw_dialog.pentry1.get_text()
            pw2 = pw_dialog.pentry2.get_text()
            if not pw1:
                self.error_message("Password cannot be empty")
            elif pw1 != pw2:
                self.error_message("Passwords do not match")
        elif response == Gtk.ResponseType.CANCEL:
            print("Cancelled. Clear entries")
        pw_dialog.destroy()

    def on_add_folder_button_clicked(self, button):
        dir_dialog = Gtk.FileChooserDialog(title = "Choose a folder to encrypt", parent = self, action = Gtk.FileChooserAction.SELECT_FOLDER)
        dir_dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, "Select", Gtk.ResponseType.OK)
        dir_dialog.set_default_size(400, 280)
        response = dir_dialog.run()
        if Gtk.ResponseType.OK == response:
            self.src_dir = dir_dialog.get_filename()
            self.entry1.set_text(self.src_dir)
            self.add_file_button.set_sensitive(False)
        dir_dialog.destroy()

    def on_add_file_button_clicked(self, button):
        file_dialog = Gtk.FileChooserDialog(title = "Choose a file to encrypt", parent = self, action = Gtk.FileChooserAction.OPEN)
        file_dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, "Select", Gtk.ResponseType.OK)
        file_dialog.set_default_size(400, 280)
        response = file_dialog.run()
        if Gtk.ResponseType.OK == response:
            self.src_file = file_dialog.get_filename()
            self.entry2.set_text(self.src_file)
            self.add_folder_button.set_sensitive(False)
        file_dialog.destroy()

    def on_ok_clicked(self, button):
        targ_folder = self.entry1.get_text()
        targ_file = self.entry2.get_text()
        print(targ_file)
        def do_encrypt():
            if self.is_writable(targ_path) is False:
                GtkDialog("Error", "This path is not writable!", Gtk.MessageType.ERROR, 0)
            pass_dialog = PasswordDialog(self)
            response = pass_dialog.run()
            if Gtk.ResponseType.OK == response:
                passp1 = pass_dialog.pentry1.get_text()
                passp2 = pass_dialog.pentry2.get_text()
                print(passp2)
                if passp1 == "" or passp2 == "":
                    GtkDialog("Error", "Blank passwords not allowed!", Gtk.MessageType.ERROR, 0)
                    pass_dialog.destroy()
                    do_encrypt()
                elif passp1 != passp2:
                    GtkDialog("Error", "Passwords do not match!", Gtk.MessageType.ERROR, 0)
                    nomatch = True
                    pass_dialog.destroy()
                    do_encrypt()
                elif targ_file != "":
                    print("doin it")
                    print(targ, targ_path)
                    run(['openssl', 'aes-256-cbc', '-e', '-salt', '-in', targ, '-out', targ + '.enc', '-iter', '29', '-pass', 'pass:' + passp2])
                elif targ_folder != "":
                    run(['tar', '-czpf', fold_name + '.tar.gz', fold_name], cwd = targ_path)
                    run(['openssl', 'aes-256-cbc', '-e', '-salt', '-in', targ + '.tar.gz', '-out', targ + '.dir.enc', '-iter', '29', '-pass', 'pass:' + passp2])
                    remove(targ + '.tar.gz')
                p1 = run(['/usr/share/porteus/gtkdialog.py', '-p', "Your " + fin + " has been encrypted and is now in the original folder.\nWould you like to remove the original source now?", '-d', 'yesno']).returncode
                #p1 = GtkDialog("", "Your " + fin + " has been encrypted and is now in the original folder.\nWould you like to remove the original source now?", Gtk.MessageType.QUESTION, 0)
                if int(p1) == 0:
                #if p1 is None:
                    remove(targ)
                pass_dialog.destroy()
            elif response == Gtk.ResponseType.CANCEL:
                print("Cancelled. Clear entries")
                pass_dialog.destroy()
        if targ_folder != "":
            print("encrypt folder")
            targ = targ_folder
            fold_name = path.basename(targ)
            fin = "folder"
            targ_path = path.dirname(targ)
            do_encrypt()
        elif targ_file != "":
            print("encrypt file")
            targ = targ_file
            fin = "file"
            targ_path = path.dirname(targ)
            do_encrypt()
        else:
            GtkDialog("Error", "You must select a file or folder!", Gtk.MessageType.ERROR, 0)

    def is_writable(self, path):
        try:
            tmp_prefix = "write_tester"
            count = 0
            filename = path.join(path, tmp_prefix)
            while(path.exists(filename)):
                filename = "{}.{}".format(path.join(path, tmp_prefix),count)
                count = count + 1
            f = open(filename,"w")
            f.close()
            remove(filename)
            return True
        except Exception: #as e:
            #print "{}".format(e)
            return False

    def on_cancel_clicked(self, button):
        Gtk.main_quit()

class PasswordDialog(Gtk.Dialog):
    def __init__(self, parent):
        Gtk.Dialog.__init__(self, "Passphrase", parent, 0)
        self.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)

        self.set_default_size(550, 180)
        self.set_border_width(20)

        self.vb = self.get_content_area()
        self.vb.pack_start(Gtk.Label(label = "Please provide a passphrase which will be used to decrypt your file."), False, False, 5)
        #self.vb.pack_start(self.info_txt, False, False, 5)

        self.hb = Gtk.Box(spacing = 10, homogeneous = True)

        self.grid = Gtk.Grid(row_spacing = 10, column_spacing = 10)
        self.l_p1 = Gtk.Label(xalign = 0.0)
        self.l_p1.set_markup("\tPassphrase:")
        self.grid.attach(self.l_p1, 0, 0, 1, 1)
        self.pentry1 = Gtk.Entry(visibility = False, invisible_char = '*')
        self.grid.attach(self.pentry1, 1, 0, 1, 1)
        self.l_p2 = Gtk.Label(xalign = 0.0)
        self.l_p2.set_markup("\tRepeat:")
        self.grid.attach(self.l_p2, 0, 1, 1, 1)
        self.pentry2 = Gtk.Entry(visibility = False, invisible_char = '*')
        self.grid.attach(self.pentry2, 1, 1, 1, 1)
        self.hb.pack_start(self.grid, False, False, 10)
        self.vb.pack_start(self.hb, False, False, 15)

        self.show_all()

class GtkDialog():
    def __init__(self, primary_text = "Message Header", secondary_text = "Message Text", dtype = Gtk.MessageType.INFO, timeout = 0):

        if timeout > 0 and dtype == Gtk.MessageType.INFO:
            self.timeout_id = GLib.timeout_add(timeout, self.on_timeout, None)
        self.dialog = PorteusDialog(primary_text, secondary_text, dtype, timeout)
        response = self.dialog.run()
        self.dialog.destroy()
        self.dialog = None
        if response == Gtk.ResponseType.OK or response == Gtk.ResponseType.YES:
            return None
            #exit(0)
        else:
            return False
            exit(1)

    def on_timeout(self, *args, **kwargs):
        if self.dialog is not None:
            self.dialog.destroy()
            # ~ exit(0)

class PorteusDialog(Gtk.Dialog):
    def __init__(self, primary_text, secondary_text, dtype, timeout):
        Gtk.Dialog.__init__(self, title="Porteus Message", transient_for=GtkEncrypt(), flags=0)

        self.set_default_size(250, 100)

        icon_name = "dialog-information"
        if timeout == 0:
            self.add_button(Gtk.STOCK_OK, Gtk.ResponseType.OK)
            self.set_default_size(250, 120)

        if dtype == Gtk.MessageType.QUESTION:
            self.add_button(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
            icon_name = "dialog-question"
        elif dtype == Gtk.MessageType.ERROR:
            icon_name = "dialog-error"
        elif dtype == Gtk.MessageType.WARNING:
            icon_name = "dialog-warning"

        self.vb = self.get_content_area()

        self.hb = Gtk.Box(spacing = 5, homogeneous = False)

        self.grid = Gtk.Grid(row_spacing = 5, column_spacing = 10)
        self.img =  Gtk.Image.new_from_icon_name(icon_name, Gtk.IconSize.DIALOG)
        self.grid.attach(self.img, 0, 0, 1, 2)
        self.l_header = Gtk.Label(xalign = 0.0)
        self.l_header.set_markup("<span size=\"medium\" weight=\"bold\">" + primary_text + "</span>")
        self.grid.attach(self.l_header, 1, 0, 1, 1)
        self.l_txt = Gtk.Label(xalign = 0.0, label = secondary_text)

        self.grid.attach(self.l_txt, 1, 1, 1, 1)
        self.hb.pack_start(self.grid, False, False, 10)

        self.vb.pack_start(self.hb, False, False, 15)

        self.show_all()

win = GtkEncrypt()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
