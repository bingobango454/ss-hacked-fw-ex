#!/usr/bin/python
## password script in pygobject3

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Vte', '2.91')
from gi.repository import Gtk, Vte, GLib
import subprocess
import tempfile
import os
import sys
import platform

class GtkPassW(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title = "Change Password", border_width = 5, height_request = 150, width_request = 450, icon_name = "dialog-password-symbolic")
        self.vb = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL)

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup("<span size=\"large\" weight=\"bold\">Choose a user for password change</span>")
        self.vb.pack_start(self.l_header_txt, False, False, 5)

        self.vb.pack_start(Gtk.Separator(), False, False, 5)

        self.hb1 = Gtk.Box(spacing = 5)
        self.hb1.pack_start(Gtk.Label(label = "Choose a user to change the password for:  "), False, False, 5)
        
        with open('/tmp/user', "w") as f:
            p1 = subprocess.run("awk -F: '$6 ~ /\/home/ && $3 >= 500 {print $1}' /etc/passwd", shell=True, stdout = f)
        with open('/tmp/user', "r") as f:
            p1 = f.read()
            user = p1.strip()
            print("user is " + user)
        users = Gtk.ListStore(int, str)
        users.append([1, "none"])
        users.append([2, user])
        users.append([3, "root"])


        self.combo = Gtk.ComboBox.new_with_model_and_entry(users)
        self.combo.set_entry_text_column(1)
        self.combo.set_active(0)
        self.combo.connect("changed", self.on_combo_changed)
        self.hb1.pack_start(self.combo, False, False, 5)
        self.vb.add(self.hb1)

        self.hb_bottom = Gtk.Box(spacing = 5, homogeneous = False)
        self.cancel_button = Gtk.Button.new_with_label("Exit")
        self.cancel_button.connect("clicked", self.on_cancel_clicked)
        self.hb_bottom.pack_end(self.cancel_button, False, False, 2)

        # ~ self.ok_button = Gtk.Button.new_with_label("OK")
        # ~ self.ok_button.connect("clicked", self.on_ok_clicked)
        # ~ self.ok_button.set_sensitive(False)
        # ~ self.hb_bottom.pack_end(self.ok_button, False, False, 2)

        self.vb.pack_end(self.hb_bottom, False, False, 5)
        self.vb.pack_end(Gtk.Separator(), False, False, 10)
        self.add(self.vb)

    def on_combo_changed(self, combo):
        tree_iter = combo.get_active_iter()
        if tree_iter is not None:
            model = combo.get_model()
            row_id, name = model[tree_iter][:2]
            print("Selected: ID=%d, name=%s" % (row_id, name))
            gterm = GtkTerminal(self, "Enter password for " + name, name)
            gterm.run()
            gterm.destroy()
            # ~ dialog = Gtk.MessageDialog(parent = self, flags = 0, message_type = Gtk.MessageType.INFO, buttons = Gtk.ButtonsType.OK, text = "User Password")
            # ~ dialog.format_secondary_text("The new password has been set.")
            # ~ dialog.run()
            # ~ dialog.destroy()

    # ~ def on_ok_clicked(self, button):
        # Dummy
        # ~ subprocess.Popen(['vterm', 'passwd'], %s)
        # ~ dialog = Gtk.MessageDialog(parent = self, flags = 0, message_type = Gtk.MessageType.INFO, buttons = Gtk.ButtonsType.OK, text = "User Password")
        # ~ dialog.format_secondary_text("The new password has been set.")
        # ~ dialog.run()
        # ~ dialog.destroy()
        # ~ os.remove('/tmp/user')
        # ~ Gtk.main_quit()

    def on_cancel_clicked(self, button):
        os.remove('/tmp/user')
        Gtk.main_quit()

class GtkTerminal(Gtk.Dialog):
    def __init__(self, parent, header_txt, option):
        Gtk.Dialog.__init__(self, "Porteus Terminal", parent, 0)
        self.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)

        self.set_default_size(450, 250)

        self.vb = self.get_content_area()

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup("<span size=\"x-large\" weight=\"bold\">" + header_txt + "</span>")
        self.vb.add(self.l_header_txt)

        self.terminal = Vte.Terminal()
        self.pty = Vte.Pty.new_sync(Vte.PtyFlags.DEFAULT)
        self.terminal.set_pty(self.pty)
        print(option)
        self.pty.spawn_async(None, ['/usr/bin/passwd', option], None, GLib.SpawnFlags.DO_NOT_REAP_CHILD, None, None, -1, None, self.ready)
        
        self.scrolledwindow = Gtk.ScrolledWindow()
        self.scrolledwindow.add(self.terminal)
        self.vb.pack_start(self.scrolledwindow, True, True, 5)

        self.show_all()
        
    def ready(self, pty, task):
        # print('ready')
        None



win = GtkPassW()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
