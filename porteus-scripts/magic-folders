#!/usr/bin/python
## Magic folders original script by fanthom
## Ported to gtk by Brokenman

## A folder is chosen from which all changes are saved
## to an external location (outside aufs) by use of a
## bind or mounted save container.
## Supports encrypted containers.
## jssouza: ported to pygobject3
## ncmprhnsbl: completed  pygobject3 porting

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from subprocess import Popen, PIPE, run
from tempfile import TemporaryDirectory
from os import getenv, getuid, path

## Make sure we're in X
display = getenv('DISPLAY')
if display == None:
    print("This program requires an X session!")
    quit()

## prompt root password(gui psu) and re-execute? probly a bit dirty..
## using subprocess rather than os.system() to be script agnostic..
user = getuid()
if user != 0:
    print("You must be root to run this!")
    this_script = path.abspath(__file__)
    Popen(['psu', this_script])
    quit()

class GtkMagic(Gtk.Window):
    def __init__(self):
        self.non_posix_fs_list = ['vfat', 'fuseblk']
        self.tmp_dir = TemporaryDirectory()
        Gtk.Window.__init__(self, title = "Magic Folders", border_width = 5, height_request = 450, width_request = 500, icon_name = "cdr")
        self.vb = Gtk.Box(spacing = 5, orientation = Gtk.Orientation.VERTICAL)

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup("<span size=\"x-large\" weight=\"bold\">Porteus Magic Folders</span>")
        self.vb.pack_start(self.l_header_txt, False, False, 5)

        self.vb.pack_start(Gtk.Separator(), False, False, 5)
        
        self.l_src = Gtk.Label(xalign = 0.0)
        self.l_src.set_line_wrap(True)
        self.l_src.set_max_width_chars(50)
        self.l_src.set_markup("Please select a <b>SOURCE</b> directory in your <b>live filesystem</b> <i>(aufs)</i> \
from which changes will be stored. Example: <i>/home/guest/.mozilla</i>. Changes to this directory will then be stored on a real filesystem.")
        self.vb.pack_start(self.l_src, False, False, 5)

        self.hb1 = Gtk.Box(spacing = 5)
        self.hb1.pack_start(Gtk.Label(label = "Source dir: "), False, False, 5)
        self.src_entry = Gtk.Entry(editable = False)
        self.hb1.pack_start(self.src_entry, True, True, 5)
        self.src_button = Gtk.Button.new_from_icon_name("gtk-directory", Gtk.IconSize.BUTTON)
        self.src_button.connect("clicked", self.on_src_button_clicked)
        self.hb1.pack_start(self.src_button, False, False, 2)

        self.vb.pack_start(self.hb1, False, False, 10)

        self.l_tgt = Gtk.Label(xalign = 0.0)
        self.l_tgt.set_line_wrap(True)
        self.l_tgt.set_max_width_chars(50)
        self.l_tgt.set_markup("Please select a <b>TARGET</b> directory or savefile.dat on a <b>real filesystem</b> \
where the changes will be stored. Example: /mnt/sda4/myfolder")
        self.vb.pack_start(self.l_tgt, False, False, 5)
        
        self.hb2 = Gtk.Box(spacing = 5)

        self.rb_dir = Gtk.RadioButton.new_with_label_from_widget(None, "Target is a directory")
        self.rb_dir.connect("toggled", self.on_rb_toggled, "dir")
        self.hb2.pack_start(self.rb_dir, False, False, 0)

        self.rb_file = Gtk.RadioButton.new_with_label_from_widget(self.rb_dir, "Target is a savefile.dat")
        self.rb_file.connect("toggled", self.on_rb_toggled, "file")
        self.hb2.pack_start(self.rb_file, False, False, 10)
        self.vb.pack_start(self.hb2, False, False, 10)

        self.hb3 = Gtk.Box(spacing = 5)
        self.hb3.pack_start(Gtk.Label(label = "Target dir: "), False, False, 5)
        self.tgt_dir_entry = Gtk.Entry(editable = False)
        self.hb3.pack_start(self.tgt_dir_entry, True, True, 5)
        self.tgt_dir_button = Gtk.Button.new_from_icon_name("gtk-directory", Gtk.IconSize.BUTTON)
        self.tgt_dir_button.connect("clicked", self.on_tgt_dir_button_clicked)
        self.hb3.pack_start(self.tgt_dir_button, False, False, 2)
        self.vb.pack_start(self.hb3, False, False, 5)

        self.hb4 = Gtk.Box(spacing = 5)
        self.hb4.pack_start(Gtk.Label(label = "Target file:"), False, False, 5)
        self.tgt_file_entry = Gtk.Entry(editable = False)
        self.hb4.pack_start(self.tgt_file_entry, True, True, 5)
        self.tgt_file_button = Gtk.Button.new_from_icon_name("gtk-directory", Gtk.IconSize.BUTTON)
        self.tgt_file_button.connect("clicked", self.on_tgt_file_button_clicked)
        self.hb4.pack_start(self.tgt_file_button, False, False, 2)
        self.vb.pack_start(self.hb4, False, False, 5)
        
        self.tgt_file_entry.set_sensitive(False)
        self.tgt_file_button.set_sensitive(False)
        self.tgt_is_dir = True

        self.hb_bottom = Gtk.Box(spacing = 5, homogeneous = False)
        self.cancel_button = Gtk.Button.new_with_label("Cancel")
        self.cancel_button.connect("clicked", self.on_cancel_clicked)
        self.hb_bottom.pack_end(self.cancel_button, False, False, 2)

        self.ok_button = Gtk.Button.new_with_label("OK")
        self.ok_button.connect("clicked", self.on_ok_clicked)
        self.hb_bottom.pack_end(self.ok_button, False, False, 2)
        
        self.help_img = Gtk.Image.new_from_icon_name("help-about", Gtk.IconSize.BUTTON)
        self.help_button = Gtk.Button.new_with_label("Help")
        self.help_button.set_image(self.help_img)
        self.help_button.set_always_show_image(True)
        self.help_button.connect("clicked", self.on_help_clicked)
        self.hb_bottom.pack_end(self.help_button, False, False, 2)

        self.vb.pack_end(self.hb_bottom, False, False, 5)
        self.vb.pack_end(Gtk.Separator(), False, False, 10)

        self.add(self.vb)
        self.help_button.grab_focus()
        
    def on_rb_toggled(self, button, name):
        if name == "file" and button.get_active():
            self.tgt_dir_entry.set_sensitive(False)
            self.tgt_dir_button.set_sensitive(False)
            self.tgt_file_entry.set_sensitive(True)
            self.tgt_file_button.set_sensitive(True)
            self.tgt_is_dir = False
        else:
            self.tgt_dir_entry.set_sensitive(True)
            self.tgt_dir_button.set_sensitive(True)
            self.tgt_file_entry.set_sensitive(False)
            self.tgt_file_button.set_sensitive(False)
            self.tgt_is_dir = True

    def on_src_button_clicked(self, button):
        dir_dialog = Gtk.FileChooserDialog(title = "Source Directory", parent = self, action = Gtk.FileChooserAction.SELECT_FOLDER, show_hidden = True)
        dir_dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, "Select", Gtk.ResponseType.OK)
        dir_dialog.set_default_size(400, 280)
        response = dir_dialog.run()
        if response == Gtk.ResponseType.OK:
            self.src_dir = dir_dialog.get_filename()
            self.src_entry.set_text(self.src_dir)
        dir_dialog.destroy()
        
    def on_tgt_dir_button_clicked(self, button):
        dir_dialog = Gtk.FileChooserDialog(title = "Target Directory", parent = self, action = Gtk.FileChooserAction.SELECT_FOLDER, show_hidden = True)
        dir_dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)
        dir_dialog.set_default_size(400, 280)
        response = dir_dialog.run()
        if response == Gtk.ResponseType.OK:
            self.tgt_dir = dir_dialog.get_filename()
            self.tgt_dir_entry.set_text(self.tgt_dir)
        dir_dialog.destroy()

    def on_tgt_file_button_clicked(self, button):
        file_dialog = Gtk.FileChooserDialog(title = "Target Savefile", parent = self, action = Gtk.FileChooserAction.OPEN)
        file_dialog.add_buttons(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, Gtk.STOCK_OPEN, Gtk.ResponseType.OK)
        filter_text = Gtk.FileFilter()
        filter_text.set_name("DAT files")
        filter_text.add_mime_type("application/x-dat")
        #filter_text.add_pattern("*.dat")
        file_dialog.add_filter(filter_text)
        file_dialog.set_default_size(400, 280)
        response = file_dialog.run()
        if response == Gtk.ResponseType.OK:
            self.tgt_file = file_dialog.get_filename()
            self.tgt_file_entry.set_text(self.tgt_file)
        file_dialog.destroy()

    def validate_inputs(self):
        if not path.exists(self.src_entry.get_text()):
            self.error_message("Invalid source directory")
            return False
        if not self.is_dir_in_aufs(self.src_entry.get_text()):
            self.error_message("You must choose a location in the live file system for the source. For example: /home/guest/.mozilla")
            return False
        if self.tgt_is_dir:
            if not path.exists(self.tgt_dir_entry.get_text()):
                self.error_message("Invalid target directory")
                return False
            if self.is_dir_in_aufs(self.tgt_dir_entry.get_text()):
                self.error_message("You must choose a real file system for the target. You can not choose a location in the live filesystem like /home/guest")
                return False
        elif not path.exists(self.tgt_file_entry.get_text()):
            self.error_message("Invalid target savedat")  
            return False
        return True
        
    def is_encrypted(self):
        p1 = Popen(['file', self.tgt_file_entry.get_text()], stdout=PIPE)
        if run(['grep', '-o', 'LUKS'], stdin = p1.stdout, stdout=PIPE).stdout.decode('utf-8').strip() == "LUKS":
            return True
        return False
        
    def is_dir_in_aufs(self, dirpath):
        p1 = Popen(['df', '-T', dirpath], stdout=PIPE)
        p2 = Popen(['tail', '-n1'], stdin = p1.stdout, stdout=PIPE)
        if run(['awk', '{print$1}'], stdin = p2.stdout, stdout=PIPE).stdout.decode('utf-8').strip() == "aufs":
            return True
        return False
        
    def if_fs_posix(self, path):
        p1 = Popen(['df', '--output=fstype', path], stdout=PIPE)
        fs = run(['sed', '1d'], stdin = p1.stdout, stdout=PIPE).stdout.decode('utf-8').strip()
        if fs in self.non_posix_fs_list:
            return False
        return True
        
    def make_loop(self):
        p1 = Popen(['losetup', '-an', '--output', 'name'], stdout=PIPE)
        p2 = Popen(['tail', '-n1'], stdin = p1.stdout, stdout=PIPE)
        x = run(['sed', 's^/dev/loop^^'], stdin = p2.stdout, stdout=PIPE).stdout.decode('utf-8').strip()
        if not path.exists('/dev/loop' + x):
            run(['mknod', '/dev/loop' + x, 'b', '7', 'x'])
        self.loop_device = '/dev/loop' + x
        
    def do_magic(self):
        if not self.tgt_is_dir:
            if self.is_encrypted():
                pw_dialog = PasswordDialog(self)
                response = pw_dialog.run()
                if response == Gtk.ResponseType.OK:
                    pw1 = pw_dialog.pentry1.get_text()
                    pw2 = pw_dialog.pentry2.get_text()
                    if not pw1:
                        self.error_message("Password cannot be empty")
                    elif pw1 != pw2:
                        self.error_message("Passwords do not match")
                elif response == Gtk.ResponseType.CANCEL:
                    print("Cancelled. Clear entries")
                pw_dialog.destroy()                
            else:
                # Direct mount dat file
                print("Direct mount dat file")
        else:
            # mount tgt_dir
            print("Mount tgt dir")

    def on_ok_clicked(self, button):
        if not self.validate_inputs():
            print("Invalid, message dialog saying why, clear all inputs")
            return
        # Ask if user wants magic now or later
        # if now, self.do_magic
        # self.update_rootcopy
        
                
                
    def error_message(self, message):
        dialog = Gtk.MessageDialog(parent = self, flags = 0, message_type = Gtk.MessageType.ERROR, buttons = Gtk.ButtonsType.OK, text = "Magic Folders")
        dialog.format_secondary_text(message)
        dialog.run()
        dialog.destroy()       

    def on_help_clicked(self, button):
        help_dialog = HelpDialog(self)
        help_dialog.run()
        help_dialog.destroy()
        
    def on_cancel_clicked(self, button):
        Gtk.main_quit()
        
class PasswordDialog(Gtk.Dialog):
    def __init__(self, parent):
        Gtk.Dialog.__init__(self, "Passphrase", parent, 0)
        self.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)

        self.set_default_size(550, 180)

        self.info_txt = Gtk.Label(label = "This passphrase will be required at boot time.")
        self.info_txt.get_style_context().add_class("dim-label")

        self.vb = self.get_content_area()
        self.vb.pack_start(Gtk.Label(label = "Please provide a passphrase which will be used to decrypt your savefile container."), False, False, 5)
        self.vb.pack_start(self.info_txt, False, False, 5)
        
        self.hb = Gtk.Box(spacing = 10, homogeneous = True)
        
        self.grid = Gtk.Grid(row_spacing = 10, column_spacing = 10)
        self.l_p1 = Gtk.Label(xalign = 0.0)
        self.l_p1.set_markup("\tPassphrase:")
        self.grid.attach(self.l_p1, 0, 0, 1, 1)
        self.pentry1 = Gtk.Entry(visibility = False, invisible_char = '*')
        self.grid.attach(self.pentry1, 1, 0, 1, 1)
        self.l_p2 = Gtk.Label(xalign = 0.0)
        self.l_p2.set_markup("\tRepeat:")
        self.grid.attach(self.l_p2, 0, 1, 1, 1)
        self.pentry2 = Gtk.Entry(visibility = False, invisible_char = '*')
        self.grid.attach(self.pentry2, 1, 1, 1, 1)
        self.hb.pack_start(self.grid, False, False, 10)
        self.vb.pack_start(self.hb, False, False, 15)

        self.show_all()

class HelpDialog(Gtk.Dialog):
    def __init__(self, parent):
        Gtk.Dialog.__init__(self, "Help", parent, 0)
        self.add_buttons(Gtk.STOCK_OK, Gtk.ResponseType.OK)

        self.set_default_size(400, 280)

        self.help_header_txt = "<span size=\"large\" weight=\"bold\">Magic Folders Help</span>"
        self.help_txt = "This tool allows you to save changes made to selected folders in the system.\n\n\
It allows you to save your settings for one application (Example: /home/guest/.mozilla), for one user (/home/guest) \
or any other folder in the system (Example: /var/log). \n\n\
These changes will be loaded at every boot."

        self.l_header_txt = Gtk.Label()
        self.l_header_txt.set_markup(self.help_header_txt)

        self.vb = self.get_content_area()
        self.vb.add(self.l_header_txt)

        self.scrolledwindow = Gtk.ScrolledWindow(hexpand = True, vexpand = True)
        self.vb.pack_start(self.scrolledwindow, True, True, 5)

        self.textview = Gtk.TextView(border_width = 20, editable = False, wrap_mode = Gtk.WrapMode.WORD, justification = Gtk.Justification.FILL, cursor_visible = False)
        self.textbuffer = self.textview.get_buffer()
        self.textbuffer.set_text(self.help_txt)

        self.scrolledwindow.add(self.textview)

        self.show_all()

win = GtkMagic()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()
