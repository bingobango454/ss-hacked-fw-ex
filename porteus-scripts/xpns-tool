#!/bin/bash

## Porteus network setup wizard.
## Original script by fanthom
## Ported to Xdialog by Brokenman
## Ported to gtkdialog by Brokenman

SCRIPT="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
TMP=/tmp/.gtkpns.tmp

[ ! $DISPLAY ] && /opt/porteus-scripts/pns-tool && exit

exec 2>/dev/null

. /usr/lib/librokenman
. /usr/share/porteus/gtkdialog-functions

# Switch to root
if [ `whoami` != "root" ]; then
    echo $HOME > $TMP
    /opt/porteus-scripts/xorg/psu "$SCRIPT" || sleep 1
    exit
	else
    [ ! -f $TMP ] && echo $HOME > $TMP
fi
pth=`<$TMP`
rm $TMP

# Variables
DIR="/tmp/pns-tool"
TMP="/tmp/pns-tmp"
FILE=$TMP/S-pns
RCLOCAL="$DIR/etc/rc.d/rc4.d/S-pns"
SUPPLICANT="$TMP/wpa_supplicant.conf"
WPASUPPLICANT="$DIR/etc/wpa_supplicant.conf"
export DUMP=$TMP/dump.tmp
export TXT=$TMP/textbox.txt
DATE=`date +%c`
export ENCADVICE=$TMP/encadvice.tmp
export FSCAN=$TMP/fullscan.tmp
export PSCAN=$TMP/scan.tmp
export PIXMAP=/usr/share/pixmaps/porteus
LOG=/var/log/pns

# Cleanup and stopping services
cleanup() {
[ -d $DIR ] && rm -rf $DIR
[ -d $TMP ] && rm -rf $TMP
}

chkclose(){
if [ -f $DUMP ]; then
[ `egrep -o "Cancel|abort" $DUMP` ] && { cleanup; exit; }
fi
}

chkhome(){
[ `egrep -o Home $DUMP` ] && { cleanup; $SCRIPT; exit; }
}

infobox(){
gtk_infobox "$1" $2
}

get_device(){
echo '
'`start_window "Choose device" cdr 420 260`'
  '`table device 200 300 "Choose your network device"`'
    '$(for f in `ls -1 /sys/class/net |sed '/lo/d'|sort -r`; do
      echo "<item>$f</item>"
    done)'
  </table>
  <hbox>
    '`butstock junk Home gtk-home`'</button>
    '`butstock junk "_Device info" gtk-help`'</button>
    '`butstock junk _Select gtk-yes`'</button>
    '`butcancel`'
  </hbox>
'`end_window`'
'|while read output; do
echo $output
echo $output|tr " " "\n"|sed 's/"//g' > $DUMP
done <<< `gtkdialog -s`

## Check for exit
[ `egrep -o "Cancel|abort" $DUMP` ] && touch /tmp/.pnsclose
chkclose
chkhome

IFACE=`grep device $DUMP|get_last_field =`
echo $IFACE > $TMP/iface
[ `grep -o info $DUMP` ] && { get_device_info; unset IFACE; $FUNCNAME; }
}

get_device_info(){
ifconfig|grep -A7 $IFACE|sed "s/$IFACE//g"|sed "s/^[ \t]*//" > $TXT

echo '
'`start_window "Device info" cdr 420 260`'
  '`txtcolor 400 red small bold "$IFACE"`'
  	<vbox margin="5" scrollable ="true">
		'`txtfile 400 "$TXT"`'
	</vbox>
  <hbox>'`butreturn "Return to last page" true`'</button></hbox>
'`end_window`'
'|gtkdialog -s
}

choose_ip_method(){
echo '
'`start_window "Choose IP method" cdr 420 350`'
  <hbox>
    '`pixmapfile 48 48 $PIXMAP/wifi.png`'
    '`txtcolor 340 blue x-large normal "Choose how to get your IP address"`'
  </hbox>
  '`hsep`'
  '`txtmarkup 400 "Choose how you want to receive your IP address. If you are unsure how to manually enter your settings you should choose to receive your IP address automatically."`'
  <hbox>
	'`rbut "true" dhcpip "Automatically via DHCP"`'
	<action signal="changed">if true disable:ipaddress</action>
	<action signal="changed">if true disable:gateway</action>
	<action signal="changed">if true disable:dnssettings</action>
	</radiobutton>
	'`rbut "false" manualip "Enter manual settings"`'
	<action signal="changed">if true enable:ipaddress</action>
	<action signal="changed">if true enable:gateway</action>
	<action signal="changed">if true enable:dnssettings</action>
	</radiobutton>
	</hbox>
	'`hsep`'
  <hbox>
	'`txtmarkup 90 "IP address: "`'
	'`entry false "Enter your IP address" "" ipaddress`'</entry>
  </hbox>
  '`hsep`'
  <hbox>
	'`txtmarkup 90 "Gateway: "`'
	'`entry false "Enter your gateway address" "" gateway`'</entry>
  </hbox>
  '`hsep`'
  <hbox>
	'`txtmarkup 90 "DNS: "`'
	'`entry false "Enter DNS address" "" dnssettings`'</entry>
  </hbox>
  '`hsep`'
  '`blankline`'
  <hbox>'`butok`''`butcancel`'</hbox>
'`end_window`'
'|while read line; do
echo $line|tr " " "\n"|sed -e '/_ALL/d' -e '/false/d' -e 's/"//g'|egrep "manualip|dnssettings|gateway|ipaddress|dhcpip|Cancel|abort" > $DUMP
done <<<`gtkdialog -s`

[ `egrep -o "Cancel|abort" $DUMP` ] && { touch /tmp/.pnsclose; exit; }
chkclose

## Get settings from $DUMP
[ `grep "dhcpip=true" $DUMP` ] && echo dhcp > $TMP/ipmethod
if [ `grep "manualip=true" $DUMP` ]; then
	dns=`grep dnssetting $DUMP|get_last_field =`
	gway=`grep gateway $DUMP|get_last_field =`
	ipaddy=`grep ipaddress $DUMP|get_last_field =`
	## Make sure IP is valid
	for a in $dns $gway $ipaddy; do
		cnt=`awk -F. '{print NF}' <<<$a`
		letters=`grep [Aa-Zz] <<<$a`
		[ $cnt -ne 4 ] && badaddress=1
		[ $letters ] && badaddress=1
	done
	if [ $badaddress ]; then
		gtk_message "A bad address was found. Please try again!" 400 gtk-dialog-warning
		unset dns gway ipaddress cnt letters badaddress
		$FUNCNAME
	fi
echo "dns=$dns" > $TMP/ipmethod
echo "gateway=$gway" >> $TMP/ipmethod
echo "ip=$ipaddy" >> $TMP/ipmethod
IP=${ipaddy}
fi
}

sniff_encryption(){
## Sniff encryption
ENWPA=`sed -n '/'"$SSID"'/,/Cell/p' $FSCAN | egrep 'IE: WPA|802.11i/WPA2'`
if [[ $ENWPA ]]; then
        echo "wpa2" > $ENCADVICE
                else
        grep -B 4 "$SSID" $FSCAN | grep -v "$SSID" >/tmp/wep$$
        sed -n '/'"$SSID"'/,/Cell/p' $FSCAN >>/tmp/wep$$
        ENWEP=`grep 'Encryption key' /tmp/wep$$ | cut -d ":" -f2`
                if [[ $ENWEP = on ]]; then
        echo "wep" > $ENCADVICE
                else
        echo "open" > $ENCADVICE
                fi
        rm /tmp/wep$$
fi
}; export -f sniff_encryption

get_wireless_key(){
echo '
'`start_window Passphrase gtk-dialog-authentication 400 230`'
  <hbox>
  '`pixmapstock gtk-dialog-authentication`'
  '`txtmarkup 340 "Please provide the passphrase required to connect to the wireless network."`'
  </hbox>
	<frame>
		<hbox>
			<text default-width="90"><label>Passphrase:</label></text>
			<entry visibility="false" invisible-char="120" tooltip-text="visibility, invisible-char">
				<default>""</default>
				<variable>pp1</variable>
				<action signal="changed">enable:pp2</action>
			</entry>
		</hbox>
		<hbox>
			<text default-width="90"><label>Repeat:</label></text>
			<entry visibility="false" invisible-char="120" tooltip-text="visibility, invisible-char" sensitive="false">
				<default>""</default>
				<variable>pp2</variable>
			</entry>
		</hbox>
	</frame>
	<hbox>
		'`butcancel`'
		'`butok`'
	</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

## Check for cancel
[ `egrep -o "Cancel|abort" $DUMP` ] && { touch /tmp/.pnsclose; exit; }

## Check for blank pass
pp1=`grep "pp1=" <$DUMP|sed 's/"//g'|get_last_field =`
pp2=`grep "pp2=" <$DUMP|sed 's/"//g'|get_last_field =`
rm $DUMP

if [ -z "$pp1" -o -z "$pp2" ]; then
	gtk_message "No blank pass allowed" 300 gtk-dialog-warning
	$FUNCNAME
	return
fi

## Check for mismatch
if [ "$pp1" != "$pp2" ]; then
	gtk_message "Password mismatch found!" 300 gtk-dialog-warning
	$FUNCNAME
	return
fi

## Check for sufficient characters
pcnt=$(( `wc -c <<<$pp1`-1 ))
if [ $pcnt -lt 8 ]; then
	gtk_message "Pass must be more than 7 chars!" 300 gtk-dialog-warning
	$FUNCNAME
	return
fi

unset pp2
}

kill_wifi() {
test -x /etc/rc.d/rc.inet1 && /etc/rc.d/rc.inet1 stop >/dev/null 2>&1
test -x /etc/rc.d/rc.wicd && /etc/rc.d/rc.wicd stop >/dev/null 2>&1
test -x /etc/rc.d/rc.networkmanager && /etc/rc.d/rc.networkmanager stop >/dev/null 2>&1
for x in `ps x | grep wpa_supplicant | awk '{print $1}'`; do kill -9 $x >/dev/null 2>&1; done
for x in `ps x | grep dhcpcd | awk '{print $1}'`; do kill -9 $x >/dev/null 2>&1; done
}

wireless_scan(){
## Give notice during scan time
echo "Scanning local area" > /tmp/.message
manual_progress "Processing ..." &
iwlist $IFACE sc > $FSCAN &
wait
grep -B2 ESSID $FSCAN|sed -e "s/--//g" -e 's/^[ \t]*//' > $PSCAN
kill_manual_progress
echo None > $TMP/chosen-essid.tmp

## Show the results
echo '
'`start_window "Scan results" cdr 420 360`'
  <hbox>
    '`pixmapfile 48 48 $PIXMAP/wifi.png`'
    '`txtcolor 345 blue x-large normal "Wireless local area network scan"`'
  </hbox>
  <vbox scrollable="true" default-width="400" default-height="300">
    <text default-width="400"><label>""</label><variable>varScan</variable><input file>'$PSCAN'</input></text>
  </vbox>
  <hbox>
    '`txtcolor 90 darkred small bold "Hidden AP:"`'
      '`entry true "Connect to a hidden access point" "" hidden`'<width>200</width></entry>
    '`txtcolor 90 darkred small bold "Choose AP:"`'
	<comboboxtext default-width="100">
	<variable>SSID</variable>
		<sensitive>enabled</sensitive>
		<item>None</item>
		'$(for a in `grep ESSID $PSCAN|sed -e "s/ESSID://g" -e 's/"//g'`; do
		echo "<item>$a</item>"
		done)'
		<action signal="changed">echo $SSID > '$TMP'/chosen-essid.tmp</action>
		<action signal="changed">sniff_encryption</action>
	</comboboxtext>
  </hbox>
  <hbox>'`butstock varRefresh Refresh gtk-refresh`'<action>wireless_scan</action><action>refresh:varScan</action></button>
    '`butok`'
    '`butcancel`'
  </hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

[ `egrep "Cancel|abort" $DUMP` ] && touch /tmp/.pnsclose && exit

## Check for hidden ap selection
hiddenap=`grep "hidden=" $DUMP|get_last_field =|sed 's/"//g'`
if [ $hiddenap ]; then
	echo $hiddenap > $TMP/chosen-essid.tmp
	SSID=${hiddenap}
	sniff_encryption
fi
## Make sure a AP was chosen
[ `grep -o None $TMP/chosen-essid.tmp` ] && { gtk_message "You must choose a connection!" 300 gtk-dialog-warning; $FUNCNAME; return; }
}

mainbut(){
echo '<button image-position="2" default-height="150" tooltip-text="'$1'"><width>100</width><height>100</height><label>"'$2'"</label><input file>'$PIXMAP'/'$3'</input></button>'
}

setup_network(){
if [ -f $TMP/ipmethod ]; then
  if [ `grep dhcp $TMP/ipmethod` ]; then
    echo -e '# Enabling dhcpcd for all interfaces\nfor x in `ls /sys/class/net | egrep -v "sip|lo"`; do' >> $FILE
    echo 'ifconfig $x up' >> $FILE
    echo 'dhcpcd $x >/dev/null 2>&1 &' >> $FILE
    echo 'done' >> $FILE
  fi
  if [ `grep "dns=" $TMP/ipmethod` ]; then
      echo "ifconfig $IFACE $IP" >> $FILE
      echo "route add default gw $gway $IFACE" >> $FILE
      echo "echo "nameserver $dns" > /etc/resolv.conf" >> $FILE
  fi
fi

## Ensure variables are set
SSID=`<$TMP/chosen-essid.tmp`
## Dump current SSID (without commas for wpa_passphrase)
ESSID=${SSID}
# Put commas back on SSID
SSID=`echo "\"$SSID"\"`
[ $pp1 ] && { KEY=${pp1}; unset pp1 pp2; } || OPEN=1

## Setup wireless for varying encryptions
case `<$TMP/encadvice.tmp` in
wpa2 )
PSK=`wpa_passphrase "$ESSID" $KEY | grep psk=[a-f,0-9] |tail -n1| cut -d '=' -f 2`
cat > $SUPPLICANT << EOF
# WPA/WPA2 both TKIP and CCMP > $SUPPLICANT
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
eapol_version=1
ap_scan=1
fast_reauth=1
network={
scan_ssid=0
ssid=$SSID
proto=WPA RSN
key_mgmt=WPA-PSK
pairwise=CCMP TKIP
group=CCMP TKIP WEP104 WEP40
psk=$PSK
}
EOF
echo "wpa_supplicant -Dwext -i $IFACE -c /etc/wpa_supplicant.conf > /dev/null 2>&1 &" >> $FILE
;;
wep )
cat > $SUPPLICANT << EOF
# Static WEP key
ctrl_interface=/var/run/wpa_supplicant
ap_scan=2
network={
scan_ssid=1
ssid=$SSID
key_mgmt=NONE
wep_key0=$KEY
wep_tx_keyidx=0
}
EOF
echo "wpa_supplicant -Dwext -i $IFACE -c /etc/wpa_supplicant.conf > /dev/null 2>&1 &" >> $FILE
;;
open )
cat > $SUPPLICANT << EOF
# Plaintext (no encryption) network
ctrl_interface=/var/run/wpa_supplicant
ap_scan=2
network={
scan_ssid=1
ssid=$SSID
key_mgmt=NONE
}
EOF
echo "wpa_supplicant -Dwext -i$IFACE -c /etc/wpa_supplicant.conf > /dev/null 2>&1 &" >> $FILE
;;
esac
}

main_menu(){
echo '
'`start_window "Network Setup" cdr 420 320`'
  '`txtcolor 0 darkblue x-large normal "Porteus Network Setup Tool"`'
  '`hsep`'
  <hbox>
  '`mainbut "Connect to wireless service." " Wifi network setup wizard " wifi.png`'
  '`vsep`'
  '`vsep`'
  '`mainbut "Connect using an ethernet cable connection." " Wired network setup wizard " network-wired.png`'
  </hbox>
  '`hsep`'

'`txtmarkup 395 "Choose between having a <b><i>wifi</i></b> or <b><i>wired</i></b> connection on a Local Area Network. The wizard will guide you through the network setup process."`'
'`hsep`'
<hbox>'`butcancel`'</hbox>
'`end_window`'
'|case `gtkdialog -s|sed 's/"//g'|get_last_field =|awk '{print$1}'` in
Cancel )
touch /tmp/.pnsclose
exit
;;
abort )
touch /tmp/.pnsclose
exit
;;
Wifi )
echo wifi > $TMP/method
kill_wifi
get_device
ifconfig $IFACE up > /dev/null 2>&1
wireless_scan
choose_ip_method
[ ! `grep open $ENCADVICE` ] && get_wireless_key
setup_network
;;
Wired )
echo wired > $TMP/method
kill_wifi
get_device
choose_ip_method
setup_network
;;
* )
yellow "ERROR: nothing passed to main menu case"
exit
;;
esac
}


## Initial setup
rm /$pth/Desktop/pns-tool-configs.xzm > /dev/null 2>&1
cleanup
[ -f $LOG ] && rm $LOG
date > $LOG
mkdir -p $DIR/etc/rc.d/rc4.d
mkdir $TMP
echo -e '# pns-tool settings\necho "Activating pns-tool settings"\nsleep 1\n' >> $FILE
echo -e "# Disabling rc.inet1\ntest -x /etc/rc.d/rc.inet1 && /etc/rc.d/rc.inet1 stop >/dev/null 2>&1\n" >> $FILE
echo -e "# Disabling Network Manager as unlike wicd it is not compatible with pns-tool\ntest -x /etc/rc.d/rc.networkmanager && /etc/rc.d/rc.networkmanager stop >/dev/null 2>&1\n" >> $FILE
echo "sleep 1" >> $FILE

main_menu
[ -f /tmp/.pnsclose ] && { rm /tmp/.pnsclose; cleanup; exit; }

IFACE=`<$TMP/iface`
METHOD=`<$TMP/method`
cp -f $FILE $RCLOCAL
cp -f $SUPPLICANT $WPASUPPLICANT
[ -e $RCLOCAL ] && chmod +x $RCLOCAL

# Start wireless before giving user a message
# This will waste some time while dhcp initializes
if [ -e $WPASUPPLICANT ]; then
    killall wpa_supplicant 2>/dev/ull
    killall dhcpcd 2>/dev/null
    ifconfig $IFACE down
    sleep 1
    ifconfig $IFACE up
    sleep 1
    wpa_supplicant -c $WPASUPPLICANT -i $IFACE -D wext &
    gtk_infobox "Initialising wpa_supplicant" 5000
fi

TITLE="Connection setup"

## Check if user has chosen dhcp or manual ip settings
if [ -f $TMP/ipmethod ]; then
  if [ `grep dhcp $TMP/ipmethod` ]; then
    infobox "Initialising DHCP interface now..." 1000
    $RCLOCAL #>/dev/null 2>&1
    infobox "Waiting for carrier to acknowledge..." 4000
else
    $RCLOCAL #>/dev/null 2>&1
  fi
fi

echo '
'`start_window "Check connection" cdr 400 150`'
  <frame>
  '`txtmarkup 370 "We will now check if your network connection is working. <b>Please click Yes to continue.</b>"`'
  </frame>
  <hbox>
    '`butyes`'
    '`butcancel`'
  </hbox>
'`end_window`'
'|gtkdialog -s > $DUMP

chkclose

export STATE=MANUAL
echo "Testing network connection" > /tmp/.message
manual_progress "Processing ..."

## Check for good connection
if [ "$METHOD" == "wifi" -o "$METHOD" == "wired" ]; then 
  if (wget -q --spider --force-html --inet4-only http://www.google.com >/dev/null 2>&1); then
    connected=1
	else
    unset connected
  fi
fi

kill_manual_progress

## Give notification
if [ $connected ]; then
echo '
'`start_window "Success" cdr 400 200`'
  '`txtmarkup 390 "SUCCESS! YOU HAVE INTERNET. Would you like to make a module of the resulting files and connect automatically at every boot?"`'
  <hbox>'`butyes`''`butno`'</hbox>
'`end_window`'
'|gtkdialog -s > $DUMP
[ `egrep -o "No|no|Cancel|abort" $DUMP` ] && { cleanup; exit; return; }

## Is modules folder available & writable?
  mdir=`ls -l /mnt/live/porteus/modules|awk '{print$NF}'`
  if [ "$mdir" ]; then
    is_writable $mdir
    if [ $answ -eq 0 ]; then
      export tdir=$mdir && unset answ
        else
      export tdir=/tmp && unset answ
    fi
      else
    export tdir=/tmp && unset answ
  fi

dir2xzm $DIR $tdir/pns-setup-config.xzm
  if [ "$tdir" == "/tmp" ]; then
    gtk_message "Your module is at $tdir/pns-setup-config.xzm. Please place this module in your porteus/modules folder to have it actvated at every boot." 450 gtk-dialog-yes
    cleanup
    exit
      else
    gtk_message "Your module is at $tdir/pns-setup-config.xzm and will be activated during next boot." 450 gtk-dialog-yes
    cleanup
    exit
  fi
    else
  killall wpa_supplicant
  killall dhcpcd
  gtk_message "Failed to establish connection!" 300 gtk-no
fi
